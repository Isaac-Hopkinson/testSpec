{
  "swagger": "2.0",
  "info": {
    "contact": {
      "url": "https://baserow.io/contact"
    },
    "license": {
      "name": "MIT",
      "url": "https://gitlab.com/bramw/baserow/-/blob/master/LICENSE"
    },
    "title": "Baserow API spec",
    "version": "1.10.1"
  },
  "paths": {
    "/api/admin/dashboard/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AdminDashboard"
            }
          },
          "401": {
            "description": "No response body"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Admin"
        ],
        "description": "Returns the new and active users for the last 24 hours, 7 days and 30 days. The `previous_` values are the values of the period before, so for example `previous_new_users_last_24_hours` are the new users that signed up from 48 to 24 hours ago. It can be used to calculate an increase or decrease in the amount of signups. A list of the new and active users for every day for the last 30 days is also included.\n\nThis is a **premium** feature.",
        "operationId": "admin_dashboard"
      }
    },
    "/api/admin/groups/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Defines which page should be returned.",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "If provided only groups that match the query will be returned.",
            "in": "query",
            "name": "search",
            "type": "string"
          },
          {
            "description": "Defines how many groups should be returned per page.",
            "in": "query",
            "name": "size",
            "type": "integer"
          },
          {
            "description": "A comma separated string of attributes to sort by, each attribute must be prefixed with `+` for a descending sort or a `-` for an ascending sort. The accepted attribute names are: id, name, application_count, created_on. For example `sorts=-id,-name` will sort the groups first by descending id and then ascending name. A sortparameter with multiple instances of the same sort attribute will respond with the ERROR_ADMIN_LISTING_INVALID_SORT_ATTRIBUTE error.",
            "in": "query",
            "name": "sorts",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/GroupsAdminResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_PAGE_SIZE_LIMIT",
                    "ERROR_INVALID_PAGE",
                    "ERROR_ADMIN_LISTING_INVALID_SORT_DIRECTION",
                    "ERROR_ADMIN_LISTING_INVALID_SORT_ATTRIBUTE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "No response body"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Admin"
        ],
        "description": "Returns all groups with detailed information on each group, if the requesting user is staff.\n\nThis is a **premium** feature.",
        "operationId": "admin_list_groups"
      }
    },
    "/api/admin/groups/{group_id}/": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The id of the group to delete",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GROUP_DOES_NOT_EXIST",
                    "ERROR_NO_ACTIVE_PREMIUM_LICENSE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "No response body"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Admin"
        ],
        "description": "Deletes the specified group and the applications inside that group, if the requesting user is staff. \n\nThis is a **premium** feature.",
        "operationId": "admin_delete_group"
      }
    },
    "/api/admin/users/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Defines which page should be returned.",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "If provided only users that match the query will be returned.",
            "in": "query",
            "name": "search",
            "type": "string"
          },
          {
            "description": "Defines how many users should be returned per page.",
            "in": "query",
            "name": "size",
            "type": "integer"
          },
          {
            "description": "A comma separated string of attributes to sort by, each attribute must be prefixed with `+` for a descending sort or a `-` for an ascending sort. The accepted attribute names are: id, is_active, name, username, date_joined, last_login. For example `sorts=-id,-is_active` will sort the users first by descending id and then ascending is_active. A sortparameter with multiple instances of the same sort attribute will respond with the ERROR_ADMIN_LISTING_INVALID_SORT_ATTRIBUTE error.",
            "in": "query",
            "name": "sorts",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/UserAdminResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_PAGE_SIZE_LIMIT",
                    "ERROR_INVALID_PAGE",
                    "ERROR_ADMIN_LISTING_INVALID_SORT_DIRECTION",
                    "ERROR_ADMIN_LISTING_INVALID_SORT_ATTRIBUTE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "No response body"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Admin"
        ],
        "description": "Returns all users with detailed information on each user, if the requesting user is staff. \n\nThis is a **premium** feature.",
        "operationId": "admin_list_users"
      }
    },
    "/api/admin/users/impersonate/": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImpersonateAuthToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "properties": {
                "token": {
                  "type": "string"
                },
                "user": {
                  "description": "An object containing information related to the user.",
                  "properties": {
                    "first_name": {
                      "description": "The first name of related user.",
                      "type": "string"
                    },
                    "language": {
                      "description": "An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.",
                      "type": "string"
                    },
                    "username": {
                      "description": "The username of the related user. This is always an email address.",
                      "format": "email",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Admin"
        ],
        "description": "This endpoint allows staff to impersonate another user by requesting a JWT token and user object. The requesting user must have staff access in order to do this. It's not possible to impersonate a superuser or staff.\n\nThis is a **premium** feature.",
        "operationId": "admin_impersonate_user"
      }
    },
    "/api/admin/users/{user_id}/": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The id of the user to delete",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "USER_ADMIN_CANNOT_DELETE_SELF",
                    "USER_ADMIN_UNKNOWN_USER",
                    "ERROR_NO_ACTIVE_PREMIUM_LICENSE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "No response body"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Admin"
        ],
        "description": "Deletes the specified user, if the requesting user has admin permissions. You cannot delete yourself. \n\nThis is a **premium** feature.",
        "operationId": "admin_delete_user"
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The id of the user to edit",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PatchedUserAdminUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserAdminResponse"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_REQUEST_BODY_VALIDATION",
                    "USER_ADMIN_CANNOT_DEACTIVATE_SELF",
                    "USER_ADMIN_UNKNOWN_USER",
                    "ERROR_NO_ACTIVE_PREMIUM_LICENSE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "No response body"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Admin"
        ],
        "description": "Updates specified user attributes and returns the updated user if the requesting user is staff. You cannot update yourself to no longer be an admin or active. \n\nThis is a **premium** feature.",
        "operationId": "admin_edit_user"
      }
    },
    "/api/applications/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/Applications"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Applications"
        ],
        "description": "Lists all the applications that the authorized user has access to. The properties that belong to the application can differ per type. An application always belongs to a single group. All the applications of the groups that the user has access to are going to be listed here.",
        "operationId": "list_all_applications"
      }
    },
    "/api/applications/group/{group_id}/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Returns only applications that are in the group related to the provided value.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/Applications"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GROUP_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "tags": [
          "Applications"
        ],
        "description": "Lists all the applications of the group related to the provided `group_id` parameter if the authorized user is in that group. If thegroup is related to a template, then this endpoint will be publicly accessible. The properties that belong to the application can differ per type. An application always belongs to a single group.",
        "operationId": "list_applications"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Creates an application for the group related to the provided value.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplicationCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Applications"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GROUP_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Applications"
        ],
        "description": "Creates a new application based on the provided type. The newly created application is going to be added to the group related to the provided `group_id` parameter. If the authorized user does not belong to the group an error will be returned.",
        "operationId": "create_application"
      }
    },
    "/api/applications/group/{group_id}/order/": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Updates the order of the applications in the group related to the provided value.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderApplications"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_APPLICATION_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GROUP_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Applications"
        ],
        "description": "Changes the order of the provided application ids to the matching position that the id has in the list. If the authorized user does not belong to the group it will be ignored. The order of the not provided tables will be set to `0`.",
        "operationId": "order_applications"
      }
    },
    "/api/applications/{application_id}/": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Deletes the application related to the provided value.",
            "in": "path",
            "name": "application_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_APPLICATION_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Applications"
        ],
        "description": "Deletes an application if the authorized user is in the application's group. All the related children are also going to be deleted. For example in case of a database application all the underlying tables, fields, views and rows are going to be deleted.",
        "operationId": "delete_application"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Returns the application related to the provided value.",
            "in": "path",
            "name": "application_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Applications"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_APPLICATION_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Applications"
        ],
        "description": "Returns the requested application if the authorized user is in the application's group. The properties that belong to the application can differ per type.",
        "operationId": "get_application"
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Updates the application related to the provided value.",
            "in": "path",
            "name": "application_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PatchedApplicationUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Applications"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_APPLICATION_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Applications"
        ],
        "description": "Updates the existing application related to the provided `application_id` param if the authorized user is in the application's group. It is not possible to change the type, but properties like the name can be changed.",
        "operationId": "update_application"
      }
    },
    "/api/database/airtable/create-import-job/": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAirtableImportJob"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AirtableImportJob"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_AIRTABLE_JOB_ALREADY_RUNNING"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GROUP_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database airtable import"
        ],
        "description": "Creates a new Airtable import job. This job runs asynchronously in the background and imports the Airtable base related to the provided parameters. The `get_airtable_import_job` can be used to get the state of the import job.",
        "operationId": "create_airtable_import_job"
      }
    },
    "/api/database/airtable/import-job/{job_id}/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The job id to lookup information about.",
            "in": "path",
            "name": "job_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AirtableImportJob"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_AIRTABLE_IMPORT_JOB_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database airtable import"
        ],
        "description": "Returns the information related to the provided Airtable import job id. This endpoint can for example be polled to get the state of the import job in real time.",
        "operationId": "get_airtable_import_job"
      }
    },
    "/api/database/export/table/{table_id}/": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The table id to create and start an export job for",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Export"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExportJob"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION",
                    "ERROR_TABLE_ONLY_EXPORT_UNSUPPORTED",
                    "ERROR_VIEW_UNSUPPORTED_FOR_EXPORT_TYPE",
                    "ERROR_VIEW_NOT_IN_TABLE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST",
                    "ERROR_VIEW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table export"
        ],
        "description": "Creates and starts a new export job for a table given some exporter options. Returns an error if the requesting user does not have permissionsto view the table.",
        "operationId": "export_table"
      }
    },
    "/api/database/export/{job_id}/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The job id to lookup information about.",
            "in": "path",
            "name": "job_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExportJob"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_EXPORT_JOB_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table export"
        ],
        "description": "Returns information such as export progress and status or the url of the exported file for the specified export job, only if the requesting user has access.",
        "operationId": "get_export_job"
      }
    },
    "/api/database/fields/table/{table_id}/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Returns only the fields of the table related to the provided value.",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/FieldField"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_NO_PERMISSION_TO_TABLE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {
            "Token": []
          },
          {}
        ],
        "tags": [
          "Database table fields"
        ],
        "description": "Lists all the fields of the table related to the provided parameter if the user has access to the related database's group. If the group is related to a template, then this endpoint will be publicly accessible. A table consists of fields and each field can have a different type. Each type can have different properties. A field is comparable with a regular table's column.",
        "operationId": "list_database_table_fields"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Creates a new field for the provided table related to the value.",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/FieldCreateField"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/FieldFieldSerializerWithRelatedFields"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION",
                    "ERROR_MAX_FIELD_COUNT_EXCEEDED",
                    "ERROR_RESERVED_BASEROW_FIELD_NAME",
                    "ERROR_FIELD_WITH_SAME_NAME_ALREADY_EXISTS",
                    "ERROR_INVALID_BASEROW_FIELD_NAME",
                    "ERROR_FIELD_SELF_REFERENCE",
                    "ERROR_FIELD_CIRCULAR_REFERENCE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_NO_PERMISSION_TO_TABLE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {
            "Token": []
          }
        ],
        "tags": [
          "Database table fields"
        ],
        "description": "Creates a new field for the table related to the provided `table_id` parameter if the authorized user has access to the related database's group. Depending on the type, different properties can optionally be set.If creating the field causes other fields to change then the specificinstances of those fields will be included in the related fields response key.",
        "operationId": "create_database_table_field"
      }
    },
    "/api/database/fields/{field_id}/": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Deletes the field related to the provided value.",
            "in": "path",
            "name": "field_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RelatedFields"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_CANNOT_DELETE_PRIMARY_FIELD",
                    "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_FIELD_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table fields"
        ],
        "description": "Deletes the existing field if the authorized user has access to the related database's group. Note that all the related data to that field is also deleted. Primary fields cannot be deleted because their value represents the row. If deleting the field causes other fields to change then the specificinstances of those fields will be included in the related fields response key.",
        "operationId": "delete_database_table_field"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Returns the field related to the provided value.",
            "in": "path",
            "name": "field_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/FieldField"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_FIELD_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table fields"
        ],
        "description": "Returns the existing field if the authorized user has access to the related database's group. Depending on the type different properties could be returned.",
        "operationId": "get_database_table_field"
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Updates the field related to the provided value.",
            "in": "path",
            "name": "field_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PatchedFieldUpdateField"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/FieldFieldSerializerWithRelatedFields"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_CANNOT_CHANGE_FIELD_TYPE",
                    "ERROR_REQUEST_BODY_VALIDATION",
                    "ERROR_RESERVED_BASEROW_FIELD_NAME",
                    "ERROR_FIELD_WITH_SAME_NAME_ALREADY_EXISTS",
                    "ERROR_INVALID_BASEROW_FIELD_NAME",
                    "ERROR_FIELD_SELF_REFERENCE",
                    "ERROR_FIELD_CIRCULAR_REFERENCE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_FIELD_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table fields"
        ],
        "description": "Updates the existing field if the authorized user has access to the related database's group. The type can also be changed and depending on that type, different additional properties can optionally be set. If you change the field type it could happen that the data conversion fails, in that case the `ERROR_CANNOT_CHANGE_FIELD_TYPE` is returned, but this rarely happens. If a data value cannot be converted it is set to `null` so data might go lost.If updated the field causes other fields to change then the specificinstances of those fields will be included in the related fields response key.",
        "operationId": "update_database_table_field"
      }
    },
    "/api/database/fields/{field_id}/unique_row_values/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Returns the values related to the provided field.",
            "in": "path",
            "name": "field_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Defines how many values should be returned.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "Indicates whether the original column values must be splitted by comma.",
            "in": "query",
            "name": "split_comma_separated",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UniqueRowValues"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_FIELD_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table fields"
        ],
        "description": "Returns a list of all the unique row values for an existing field, sorted in order of frequency.",
        "operationId": "get_database_field_unique_row_values"
      }
    },
    "/api/database/formula/{table_id}/type/": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The table id of the formula field to type.",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TypeFormulaRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TypeFormulaResult"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION",
                    "ERROR_WITH_FORMULA",
                    "ERROR_FIELD_SELF_REFERENCE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table fields"
        ],
        "description": "Calculates and returns the type of the specified formula value. Does not change the state of the field in any way.",
        "operationId": "type_formula_field"
      }
    },
    "/api/database/rows/names/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A list of comma separated row ids to query from the table with id {id}. For example, if you want the name of row `42` and `43` from table `28` this parameter will be `table__28=42,43`. You can specify multiple rows for different tables but every tables must be in the same database. You need at least read permission on all specified tables.",
            "in": "query",
            "name": "table__{id}",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "properties": {
                "{table_id}*": {
                  "description": "An object containing the row names of table `table_id`.",
                  "properties": {
                    "{row_id}*": {
                      "description": "the name of the row with id `row_id` from table with id `table_id`.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_NO_PERMISSION_TO_TABLE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {
            "Token": []
          }
        ],
        "tags": [
          "Database table rows"
        ],
        "description": "Returns the names of the given row of the given tables. The nameof a row is the primary field value for this row. The result can be usedfor example, when you want to display the name of a linked row from another table.",
        "operationId": "list_database_table_row_names"
      }
    },
    "/api/database/rows/table/{table_id}/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "All the fields are included in the response by default. You can select a subset of fields by providing the exclude query parameter. If you for example provide the following GET parameter `exclude=field_1,field_2` then the fields with id `1` and id `2` are going to be excluded from the selection and response. If the `user_field_names` parameter is provided then instead exclude should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: `exclude=My Field,\"Field With , \"`. A backslash can be used to escape field names which contain double quotes like so: `exclude=My Field,Field with \\\"`.",
            "in": "query",
            "name": "exclude",
            "type": "string"
          },
          {
            "description": "The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.\n\nFor example if you provide the following GET parameter `filter__field_1__equal=test` then only rows where the value of field_1 is equal to test are going to be returned.\n\nThe following filters are available: equal, not_equal, filename_contains, has_file_type, contains, contains_not, length_is_lower_than, higher_than, lower_than, date_equal, date_before, date_after, date_not_equal, date_equals_today, date_equals_days_ago, date_equals_month, date_equals_day_of_month, date_equals_year, single_select_equal, single_select_not_equal, link_row_has, link_row_has_not, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not.",
            "in": "query",
            "name": "filter__{field}__{filter}",
            "type": "string"
          },
          {
            "description": "`AND`: Indicates that the rows must match all the provided filters.\n`OR`: Indicates that the rows only have to match one of the filters.\n\nThis works only if two or more filters are provided.",
            "in": "query",
            "name": "filter_type",
            "type": "string"
          },
          {
            "description": "All the fields are included in the response by default. You can select a subset of fields by providing the include query parameter. If you for example provide the following GET parameter `include=field_1,field_2` then only the fields withid `1` and id `2` are going to be selected and included in the response. If the `user_field_names` parameter is provided then instead include should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: `include=My Field,\"Field With , \"`. A backslash can be used to escape field names which contain double quotes like so: `include=My Field,Field with \\\"`.",
            "in": "query",
            "name": "include",
            "type": "string"
          },
          {
            "description": "Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a '-' it can be ordered descending (Z-A). If the `user_field_names` parameter is provided then instead order_by should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: `order_by=My Field,\"Field With , \"`. A backslash can be used to escape field names which contain double quotes like so: `order_by=My Field,Field with \\\"`.",
            "in": "query",
            "name": "order_by",
            "type": "string"
          },
          {
            "description": "Defines which page of rows should be returned.",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "If provided only rows with data that matches the search query are going to be returned.",
            "in": "query",
            "name": "search",
            "type": "string"
          },
          {
            "description": "Defines how many rows should be returned per page.",
            "in": "query",
            "name": "size",
            "type": "integer"
          },
          {
            "description": "Returns the rows of the table related to the provided value.",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "A flag query parameter which if provided the returned json will use the user specified field names instead of internal Baserow field names (field_123 etc). ",
            "in": "query",
            "name": "user_field_names",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PaginationSerializerExampleRowResponseSerializerWithUserFieldNames"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION",
                    "ERROR_PAGE_SIZE_LIMIT",
                    "ERROR_INVALID_PAGE",
                    "ERROR_ORDER_BY_FIELD_NOT_FOUND",
                    "ERROR_ORDER_BY_FIELD_NOT_POSSIBLE",
                    "ERROR_FILTER_FIELD_NOT_FOUND",
                    "ERROR_VIEW_FILTER_TYPE_DOES_NOT_EXIST",
                    "ERROR_VIEW_FILTER_TYPE_UNSUPPORTED_FIELD"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_NO_PERMISSION_TO_TABLE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST",
                    "ERROR_FIELD_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {
            "Token": []
          }
        ],
        "tags": [
          "Database table rows"
        ],
        "description": "Lists all the rows of the table related to the provided parameter if the user has access to the related database's group. The response is paginated by a page/size style. It is also possible to provide an optional search query, only rows where the data matches the search query are going to be returned then. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. Or if the GET parameter `user_field_names` is provided then the keys will be the name of the field. The value is what the user has provided and the format of it depends on the fields type.",
        "operationId": "list_database_table_rows"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "If provided then the newly created row will be positioned before the row with the provided id.",
            "in": "query",
            "name": "before",
            "type": "integer"
          },
          {
            "description": "Creates a row in the table related to the provided value.",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "A flag query parameter which if provided this endpoint will expect and return the user specified field names instead of internal Baserow field names (field_123 etc).",
            "in": "query",
            "name": "user_field_names",
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ExampleRowRequestSerializerWithUserFieldNames"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExampleRowResponseSerializerWithUserFieldNames"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION",
                    "ERROR_INVALID_SELECT_OPTION_VALUES"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_NO_PERMISSION_TO_TABLE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST",
                    "ERROR_ROW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {
            "Token": []
          }
        ],
        "tags": [
          "Database table rows"
        ],
        "description": "Creates a new row in the table if the user has access to the related table's group. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** to list them all. None of the fields are required, if they are not provided the value is going to be `null` or `false` or some default value is that is set. If you want to add a value for the field with for example id `10`, the key must be named `field_10`. Or instead if the `user_field_names` GET param is provided the key must be the name of the field. Of course multiple fields can be provided in one request. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.",
        "operationId": "create_database_table_row"
      }
    },
    "/api/database/rows/table/{table_id}/batch-delete/": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Deletes the rows in the table related to the value.",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchDeleteRows"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM",
                    "ERROR_ROW_IDS_NOT_UNIQUE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST",
                    "ERROR_ROW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {
            "Token": []
          }
        ],
        "tags": [
          "Database table rows"
        ],
        "description": "Deletes existing rows in the table if the user has access to the table's group.\n\n **WARNING:**  This endpoint doesn't yet work with row deleted webhooks.",
        "operationId": "batch_delete_database_table_rows"
      }
    },
    "/api/database/rows/table/{table_id}/batch/": {
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Updates the rows in the table.",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "A flag query parameter which if provided this endpoint will expect and return the user specified field names instead of internal Baserow field names (field_123 etc).",
            "in": "query",
            "name": "user_field_names",
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PatchedExampleBatchUpdateRowsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExampleBatchRowsResponse"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION",
                    "ERROR_ROW_IDS_NOT_UNIQUE",
                    "ERROR_INVALID_SELECT_OPTION_VALUES"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_NO_PERMISSION_TO_TABLE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST",
                    "ERROR_ROW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {
            "Token": []
          }
        ],
        "tags": [
          "Database table rows"
        ],
        "description": "Updates existing rows in the table if the user has access to the related table's group. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. None of the fields are required, if they are not provided the value is not going to be updated. When you want to update a value for the field with id `10`, the key must be named `field_10`. Or if the GET parameter `user_field_names` is provided the key of the field to update must be the name of the field. Multiple different fields to update can be provided for each row. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.\n\n **WARNING:** This endpoint doesn't yet work with row updated webhooks.",
        "operationId": "batch_update_database_table_rows"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "If provided then the newly created rows will be positioned before the row with the provided id.",
            "in": "query",
            "name": "before",
            "type": "integer"
          },
          {
            "description": "Creates the rows in the table.",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "A flag query parameter which if provided this endpoint will expect and return the user specified field names instead of internal Baserow field names (field_123 etc).",
            "in": "query",
            "name": "user_field_names",
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExampleBatchRowsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExampleBatchRowsResponse"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION",
                    "ERROR_ROW_IDS_NOT_UNIQUE",
                    "ERROR_INVALID_SELECT_OPTION_VALUES"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_NO_PERMISSION_TO_TABLE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST",
                    "ERROR_ROW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {
            "Token": []
          }
        ],
        "tags": [
          "Database table rows"
        ],
        "description": "Creates new rows in the table if the user has access to the related table's group. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** to list them all. None of the fields are required, if they are not provided the value is going to be `null` or `false` or some default value is that is set. If you want to add a value for the field with for example id `10`, the key must be named `field_10`. Or instead if the `user_field_names` GET param is provided the key must be the name of the field. Of course multiple fields can be provided in one request. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.\n\n **WARNING:** This endpoint doesn't yet work with row created webhooks.",
        "operationId": "batch_create_database_table_rows"
      }
    },
    "/api/database/rows/table/{table_id}/{row_id}/": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Deletes the row related to the value.",
            "in": "path",
            "name": "row_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Deletes the row in the table related to the value.",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST",
                    "ERROR_ROW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {
            "Token": []
          }
        ],
        "tags": [
          "Database table rows"
        ],
        "description": "Deletes an existing row in the table if the user has access to the table's group.",
        "operationId": "delete_database_table_row"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Returns the row related the provided value.",
            "in": "path",
            "name": "row_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Returns the row of the table related to the provided value.",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "A flag query parameter which if provided the returned json will use the user specified field names instead of internal Baserow field names (field_123 etc). ",
            "in": "query",
            "name": "user_field_names",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExampleRowResponseSerializerWithUserFieldNames"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_NO_PERMISSION_TO_TABLE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST",
                    "ERROR_ROW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {
            "Token": []
          }
        ],
        "tags": [
          "Database table rows"
        ],
        "description": "Fetches an existing row from the table if the user has access to the related table's group. The properties of the returned row depend on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field of the field. Or if the GET parameter `user_field_names` is provided then the keys will be the name of the field. The value is what the user has provided and the format of it depends on the fields type.",
        "operationId": "get_database_table_row"
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Updates the row related to the value.",
            "in": "path",
            "name": "row_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Updates the row in the table related to the value.",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "A flag query parameter which if provided this endpoint will expect and return the user specified field names instead of internal Baserow field names (field_123 etc).",
            "in": "query",
            "name": "user_field_names",
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PatchedExampleUpdateRowRequestSerializerWithUserFieldNames"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExampleRowResponseSerializerWithUserFieldNames"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION",
                    "ERROR_INVALID_SELECT_OPTION_VALUES"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_NO_PERMISSION_TO_TABLE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST",
                    "ERROR_ROW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {
            "Token": []
          }
        ],
        "tags": [
          "Database table rows"
        ],
        "description": "Updates an existing row in the table if the user has access to the related table's group. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. None of the fields are required, if they are not provided the value is not going to be updated. When you want to update a value for the field with id `10`, the key must be named `field_10`. Or if the GET parameter `user_field_names` is provided the key of the field to update must be the name of the field. Multiple different fields to update can be provided in one request. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.",
        "operationId": "update_database_table_row"
      }
    },
    "/api/database/rows/table/{table_id}/{row_id}/move/": {
      "patch": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Moves the row related to the given `row_id` before the row related to the provided value. If not provided, then the row will be moved to the end.",
            "in": "query",
            "name": "before_id",
            "type": "integer"
          },
          {
            "description": "Moves the row related to the value.",
            "in": "path",
            "name": "row_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Moves the row in the table related to the value.",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "A flag query parameter which if provided the returned json will use the user specified field names instead of internal Baserow field names (field_123 etc). ",
            "in": "query",
            "name": "user_field_names",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExampleRowResponseSerializerWithUserFieldNames"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_NO_PERMISSION_TO_TABLE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST",
                    "ERROR_ROW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {
            "Token": []
          }
        ],
        "tags": [
          "Database table rows"
        ],
        "description": "Moves the row related to given `row_id` parameter to another position. It is only possible to move the row before another existing row or to the end. If the `before_id` is provided then the row related to the `row_id` parameter is moved before that row. If the `before_id` parameter is not provided, then the row will be moved to the end.",
        "operationId": "move_database_table_row"
      }
    },
    "/api/database/tables/database/{database_id}/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Returns only tables that are related to the provided value.",
            "in": "path",
            "name": "database_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/Table"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_APPLICATION_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database tables"
        ],
        "description": "Lists all the tables that are in the database related to the `database_id` parameter if the user has access to the database's group. A table is exactly as the name suggests. It can hold multiple fields, each having their own type and multiple rows. They can be added via the **create_database_table_field** and **create_database_table_row** endpoints.",
        "operationId": "list_database_tables"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Creates a table for the database related to the provided value.",
            "in": "path",
            "name": "database_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TableCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Table"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION",
                    "ERROR_INVALID_INITIAL_TABLE_DATA",
                    "ERROR_INITIAL_TABLE_DATA_LIMIT_EXCEEDED",
                    "ERROR_RESERVED_BASEROW_FIELD_NAME",
                    "ERROR_INITIAL_TABLE_DATA_HAS_DUPLICATE_NAMES",
                    "ERROR_INVALID_BASEROW_FIELD_NAME"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_APPLICATION_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database tables"
        ],
        "description": "Creates a new table for the database related to the provided `database_id` parameter if the authorized user has access to the database's group.",
        "operationId": "create_database_table"
      }
    },
    "/api/database/tables/database/{database_id}/order/": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Updates the order of the tables in the database related to the provided value.",
            "in": "path",
            "name": "database_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderTables"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_TABLE_NOT_IN_DATABASE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_APPLICATION_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database tables"
        ],
        "description": "Changes the order of the provided table ids to the matching position that the id has in the list. If the authorized user does not belong to the group it will be ignored. The order of the not provided tables will be set to `0`.",
        "operationId": "order_database_tables"
      }
    },
    "/api/database/tables/{table_id}/": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Deletes the table related to the provided value.",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database tables"
        ],
        "description": "Deletes the existing table if the authorized user has access to the related database's group.",
        "operationId": "delete_database_table"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Returns the table related to the provided value.",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Table"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database tables"
        ],
        "description": "Returns the requested table if the authorized user has access to the related database's group.",
        "operationId": "get_database_table"
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Updates the table related to the provided value.",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PatchedTableUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Table"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database tables"
        ],
        "description": "Updates the existing table if the authorized user has access to the related database's group.",
        "operationId": "update_database_table"
      }
    },
    "/api/database/tokens/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/Token"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database tokens"
        ],
        "description": "Lists all the API tokens that belong to the authorized user. An API token can be used to create, read, update and delete rows in the tables of the token's group. It only works on the tables if the token has the correct permissions. The **Database table rows** endpoints can be used for these operations.",
        "operationId": "list_database_tokens"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TokenCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database tokens"
        ],
        "description": "Creates a new API token for a given group and for the authorized user.",
        "operationId": "create_database_token"
      }
    },
    "/api/database/tokens/{token_id}/": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Deletes the token related to the provided value.",
            "in": "path",
            "name": "token_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TOKEN_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database tokens"
        ],
        "description": "Deletes the existing token if it is owned by the authorized user and ifthe user has access to the related group.",
        "operationId": "delete_database_token"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Returns the token related to the provided value.",
            "in": "path",
            "name": "token_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TOKEN_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database tokens"
        ],
        "description": "Returns the requested token if it is owned by the authorized user andif the user has access to the related group.",
        "operationId": "get_database_token"
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Updates the token related to the provided value.",
            "in": "path",
            "name": "token_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PatchedTokenUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION",
                    "ERROR_DATABASE_DOES_NOT_BELONG_TO_GROUP",
                    "ERROR_TABLE_DOES_NOT_BELONG_TO_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TOKEN_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database tokens"
        ],
        "description": "Updates the existing token if it is owned by the authorized user and ifthe user has access to the related group.",
        "operationId": "update_database_token"
      }
    },
    "/api/database/views/decoration/{view_decoration_id}/": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Deletes the decoration related to the provided value.",
            "in": "path",
            "name": "view_decoration_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_VIEW_decoration_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table view decorations"
        ],
        "description": "Deletes the existing decoration if the authorized user has access to the related database's group.",
        "operationId": "delete_database_table_view_decoration"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Returns the view decoration related to the provided id.",
            "in": "path",
            "name": "view_decoration_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Decorator_Value_Provider_TypeViewDecoration"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_VIEW_DECORATION_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table view decorations"
        ],
        "description": "Returns the existing view decoration if the current user has access to the related database's group.",
        "operationId": "get_database_table_view_decoration"
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Updates the view decoration related to the provided value.",
            "in": "path",
            "name": "view_decoration_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PatchedDecorator_Value_Provider_TypeUpdateViewDecoration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Decorator_Value_Provider_TypeViewDecoration"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_VIEW_DECORATION_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table view decorations"
        ],
        "description": "Updates the existing decoration if the authorized user has access to the related database's group.",
        "operationId": "update_database_table_view_decoration"
      }
    },
    "/api/database/views/filter/{view_filter_id}/": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Deletes the filter related to the provided value.",
            "in": "path",
            "name": "view_filter_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_VIEW_FILTER_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table view filters"
        ],
        "description": "Deletes the existing filter if the authorized user has access to the related database's group.",
        "operationId": "delete_database_table_view_filter"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Returns the view filter related to the provided value.",
            "in": "path",
            "name": "view_filter_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ViewFilter"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_VIEW_FILTER_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table view filters"
        ],
        "description": "Returns the existing view filter if the authorized user has access to the related database's group.",
        "operationId": "get_database_table_view_filter"
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Updates the view filter related to the provided value.",
            "in": "path",
            "name": "view_filter_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PatchedUpdateViewFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ViewFilter"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_FIELD_NOT_IN_TABLE",
                    "ERROR_VIEW_FILTER_NOT_SUPPORTED",
                    "ERROR_VIEW_FILTER_TYPE_UNSUPPORTED_FIELD"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_VIEW_FILTER_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table view filters"
        ],
        "description": "Updates the existing filter if the authorized user has access to the related database's group.",
        "operationId": "update_database_table_view_filter"
      }
    },
    "/api/database/views/form/{slug}/submit/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The slug related to the form form.",
            "in": "path",
            "name": "slug",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PublicFormView"
            }
          },
          "401": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_NO_PERMISSION_TO_PUBLICLY_SHARED_FORM"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_FORM_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "tags": [
          "Database table form view"
        ],
        "description": "Returns the meta data related to the form view if the form is publicly shared or if the user has access to the related group. This data can be used to construct a form with the right fields.",
        "operationId": "get_meta_database_table_form_view"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The slug related to the form.",
            "in": "path",
            "name": "slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ExampleRowRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/FormViewSubmitted"
            }
          },
          "401": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_NO_PERMISSION_TO_PUBLICLY_SHARED_FORM"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_FORM_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "tags": [
          "Database table form view"
        ],
        "description": "Submits the form if the form is publicly shared or if the user has access to the related group. The provided data will be validated based on the fields that are in the form and the rules per field. If valid, a new row will be created in the table.",
        "operationId": "submit_database_table_form_view"
      }
    },
    "/api/database/views/gallery/{view_id}/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "If provided only the count will be returned.",
            "in": "query",
            "name": "count",
            "type": "boolean"
          },
          {
            "description": "...",
            "in": "query",
            "name": "shouldCreateSite",
            "type": "boolean"
          },
          {
            "description": "A comma separated list allowing the values of `field_options` which will add the object/objects with the same name to the response if included. The `field_options` object contains user defined view settings for each field. For example the field's order is included in here.",
            "in": "query",
            "name": "include",
            "type": "string"
          },
          {
            "description": "Defines how many rows should be returned.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "Can only be used in combination with the `limit` parameter and defines from which offset the rows should be returned.",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "If provided only rows with data that matches the search query are going to be returned.",
            "in": "query",
            "name": "search",
            "type": "string"
          },
          {
            "description": "Returns only rows that belong to the related view's table.",
            "in": "path",
            "name": "view_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GALLERY_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "tags": [
          "Database table gallery view"
        ],
        "description": "Lists the requested rows of the view's table related to the provided `view_id` if the authorized user has access to the database's group. The response is paginated by a limit/offset style.",
        "operationId": "list_database_table_gallery_view_rows"
      }
    },
    "/api/database/views/grid/{slug}/public/info/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The slug of the grid view to get public information about.",
            "in": "path",
            "name": "slug",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PublicGridViewInfo"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_NO_AUTHORIZATION_TO_PUBLICLY_SHARED_VIEW"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_VIEW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "tags": [
          "Database table grid view"
        ],
        "description": "Returns the required public information to display a single shared grid view.",
        "operationId": "get_public_grid_view_info"
      }
    },
    "/api/database/views/grid/{slug}/public/rows/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "If provided only the count will be returned.",
            "in": "query",
            "name": "count",
            "type": "boolean"
          },
          {
            "description": "All the fields are included in the response by default. You can select a subset of fields by providing the exclude_fields query parameter. If you for example provide the following GET parameter `exclude_fields=field_1,field_2` then the fields with id `1` and id `2` are going to be excluded from the selection and response. ",
            "in": "query",
            "name": "exclude_fields",
            "type": "string"
          },
          {
            "description": "The rows can optionally be filtered by the same view filters available for the views. Multiple filters can be provided if they follow the same format. The field and filter variable indicate how to filter and the value indicates where to filter on.\n\nFor example if you provide the following GET parameter `filter__field_1__equal=test` then only rows where the value of field_1 is equal to test are going to be returned.\n\nThe following filters are available: equal, not_equal, filename_contains, has_file_type, contains, contains_not, length_is_lower_than, higher_than, lower_than, date_equal, date_before, date_after, date_not_equal, date_equals_today, date_equals_days_ago, date_equals_month, date_equals_day_of_month, date_equals_year, single_select_equal, single_select_not_equal, link_row_has, link_row_has_not, boolean, empty, not_empty, multiple_select_has, multiple_select_has_not.",
            "in": "query",
            "name": "filter__{field}__{filter}",
            "type": "string"
          },
          {
            "description": "`AND`: Indicates that the rows must match all the provided filters.\n`OR`: Indicates that the rows only have to match one of the filters.\n\nThis works only if two or more filters are provided.",
            "in": "query",
            "name": "filter_type",
            "type": "string"
          },
          {
            "description": "A comma separated list allowing the values of `field_options` which will add the object/objects with the same name to the response if included. The `field_options` object contains user defined view settings for each field. For example the field's width is included in here.",
            "in": "query",
            "name": "include",
            "type": "string"
          },
          {
            "description": "All the fields are included in the response by default. You can select a subset of fields by providing the fields query parameter. If you for example provide the following GET parameter `include_fields=field_1,field_2` then only the fields with id `1` and id `2` are going to be selected and included in the response.",
            "in": "query",
            "name": "include_fields",
            "type": "string"
          },
          {
            "description": "Defines how many rows should be returned.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "Can only be used in combination with the `limit` parameter and defines from which offset the rows should be returned.",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a '-' it can be ordered descending (Z-A).",
            "in": "query",
            "name": "order_by",
            "type": "string"
          },
          {
            "description": "Defines which page of rows should be returned. Either the `page` or `limit` can be provided, not both.",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "If provided only rows with data that matches the search query are going to be returned.",
            "in": "query",
            "name": "search",
            "type": "string"
          },
          {
            "description": "Can only be used in combination with the `page` parameter and defines how many rows should be returned.",
            "in": "query",
            "name": "size",
            "type": "integer"
          },
          {
            "description": "Returns only rows that belong to the related view.",
            "in": "path",
            "name": "slug",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PublicPaginationSerializerWithGridViewFieldOptionsExampleRowResponse"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_NO_AUTHORIZATION_TO_PUBLICLY_SHARED_VIEW"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GRID_DOES_NOT_EXIST",
                    "ERROR_FIELD_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "tags": [
          "Database table grid view"
        ],
        "description": "Lists the requested rows of the view's table related to the provided `slug` if the grid view is public.The response is paginated either by a limit/offset or page/size style. The style depends on the provided GET parameters. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type.\n\n",
        "operationId": "public_list_database_table_grid_view_rows"
      }
    },
    "/api/database/views/grid/{view_id}/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "If provided only the count will be returned.",
            "in": "query",
            "name": "count",
            "type": "boolean"
          },
          {
            "description": "All the fields are included in the response by default. You can select a subset of fields by providing the exclude_fields query parameter. If you for example provide the following GET parameter `exclude_fields=field_1,field_2` then the fields with id `1` and id `2` are going to be excluded from the selection and response. ",
            "in": "query",
            "name": "exclude_fields",
            "type": "string"
          },
          {
            "description": "A comma separated list allowing the values of `field_options` and `row_metadata` which will add the object/objects with the same name to the response if included. The `field_options` object contains user defined view settings for each field. For example the field's width is included in here. The `row_metadata` object includes extra row specific data on a per row basis.",
            "in": "query",
            "name": "include",
            "type": "string"
          },
          {
            "description": "All the fields are included in the response by default. You can select a subset of fields by providing the fields query parameter. If you for example provide the following GET parameter `include_fields=field_1,field_2` then only the fields with id `1` and id `2` are going to be selected and included in the response.",
            "in": "query",
            "name": "include_fields",
            "type": "string"
          },
          {
            "description": "Defines how many rows should be returned.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "Can only be used in combination with the `limit` parameter and defines from which offset the rows should be returned.",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "Defines which page of rows should be returned. Either the `page` or `limit` can be provided, not both.",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "If provided only rows with data that matches the search query are going to be returned.",
            "in": "query",
            "name": "search",
            "type": "string"
          },
          {
            "description": "Can only be used in combination with the `page` parameter and defines how many rows should be returned.",
            "in": "query",
            "name": "size",
            "type": "integer"
          },
          {
            "description": "Returns only rows that belong to the related view's table.",
            "in": "path",
            "name": "view_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PaginationSerializerWithGridViewFieldOptionsExampleRowResponse"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GRID_DOES_NOT_EXIST",
                    "ERROR_FIELD_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "tags": [
          "Database table grid view"
        ],
        "description": "Lists the requested rows of the view's table related to the provided `view_id` if the authorized user has access to the database's group. The response is paginated either by a limit/offset or page/size style. The style depends on the provided GET parameters. The properties of the returned rows depends on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type.\n\nThe filters and sortings are automatically applied. To get a full overview of the applied filters and sortings you can use the `list_database_table_view_filters` and `list_database_table_view_sortings` endpoints.",
        "operationId": "list_database_table_grid_view_rows"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Returns only rows that belong to the related view's table.",
            "in": "path",
            "name": "view_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GridViewFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/ExampleRowResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GRID_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table grid view"
        ],
        "description": "Lists only the rows and fields that match the request. Only the rows with the ids that are in the `row_ids` list are going to be returned. Same goes for the fields, only the fields with the ids in the `field_ids` are going to be returned. This endpoint could be used to refresh data after changes something. For example in the web frontend after changing a field type, the data of the related cells will be refreshed using this endpoint. In the example all field types are listed, but normally  the number in field_{id} key is going to be the id of the field. The value is what the user has provided and the format of it depends on the fields type.",
        "operationId": "filter_database_table_grid_view_rows"
      }
    },
    "/api/database/views/grid/{view_id}/aggregation/{field_id}/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The field id you want to aggregate",
            "in": "path",
            "name": "field_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "if `include` is set to `total`, the total row count will be returned with the result.",
            "in": "query",
            "name": "include",
            "type": "string"
          },
          {
            "description": "The aggregation type you want. Available aggregation types: empty_count, not_empty_count, unique_count, min, max, sum, average, median, decile, variance, std_dev",
            "in": "query",
            "name": "type",
            "type": "string"
          },
          {
            "description": "Select the view you want the aggregation for.",
            "in": "path",
            "name": "view_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "properties": {
                "total": {
                  "description": "The total value count. Only returned if `include=total` is specified as GET parameter.",
                  "example": 7,
                  "type": "integer"
                },
                "value": {}
              },
              "required": [
                "value"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_AGGREGATION_TYPE_DOES_NOT_EXIST",
                    "ERROR_FIELD_NOT_IN_TABLE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_FIELD_DOES_NOT_EXIST",
                    "ERROR_GRID_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "tags": [
          "Database table grid view"
        ],
        "description": "Computes the aggregation of all the values for a specified field from the selected grid view. You must select the aggregation type by setting the `type` GET parameter. If filters are configured for the selected view, the aggregation is calculated only on filtered rows. You need to have read permissions on the view to request an aggregation.",
        "operationId": "get_database_table_grid_view_field_aggregation"
      }
    },
    "/api/database/views/grid/{view_id}/aggregations/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "if `include` is set to `total`, the total row count will be returned with the result.",
            "in": "query",
            "name": "include",
            "type": "string"
          },
          {
            "description": "If provided the aggregations are calculated only for matching rows.",
            "in": "query",
            "name": "search",
            "type": "string"
          },
          {
            "description": "Select the view you want the aggregations for.",
            "in": "path",
            "name": "view_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "properties": {
                "field_{id}": {},
                "total": {
                  "description": "The total value count. Only returned if `include=total` is specified as GET parameter.",
                  "example": 7,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GRID_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "tags": [
          "Database table grid view"
        ],
        "description": "Returns all field aggregations values previously defined for this grid view. If filters exist for this view, the aggregations are computed only on filtered rows.You need to have read permissions on the view to request aggregations.",
        "operationId": "get_database_table_grid_view_field_aggregations"
      }
    },
    "/api/database/views/kanban/{view_id}/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Accepts `field_options` as value if the field options must also be included in the response.",
            "in": "query",
            "name": "include",
            "type": "string"
          },
          {
            "description": "Defines how many rows should be returned by default. This value can be overwritten per select option.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "Defines from which offset the rows should be returned.This value can be overwritten per select option.",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "Accepts multiple `select_option` parameters. If not provided, the rows of all select options will be returned. If one or more `select_option` parameters are provided, then only the rows of those will be included in the response. `?select_option=1&select_option=null` will only include the rows for both select option with id `1` and `null`. `?select_option=1,10,20` will only include the rows of select option id `1` with a limit of `10` and and offset of `20`.",
            "in": "query",
            "name": "select_option",
            "type": "string"
          },
          {
            "description": "Returns only rows that belong to the related view's table.",
            "in": "path",
            "name": "view_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/KanbanViewExampleResponse"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_KANBAN_VIEW_HAS_NO_SINGLE_SELECT_FIELD",
                    "ERROR_INVALID_SELECT_OPTION_PARAMETER",
                    "ERROR_NO_ACTIVE_PREMIUM_LICENSE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_KANBAN_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "tags": [
          "Database table kanban view"
        ],
        "description": "Responds with serialized rows grouped by the view's single select field options if the user is authenticated and has access to the related group. Additional query parameters can be provided to control the `limit` and `offset` per select option.\n\nThis is a **premium** feature.",
        "operationId": "list_database_table_kanban_view_rows"
      }
    },
    "/api/database/views/sort/{view_sort_id}/": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Deletes the sort related to the provided value.",
            "in": "path",
            "name": "view_sort_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_VIEW_SORT_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table view sortings"
        ],
        "description": "Deletes the existing sort if the authorized user has access to the related database's group.",
        "operationId": "delete_database_table_view_sort"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Returns the view sort related to the provided value.",
            "in": "path",
            "name": "view_sort_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ViewSort"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_VIEW_SORT_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table view sortings"
        ],
        "description": "Returns the existing view sort if the authorized user has access to the related database's group.",
        "operationId": "get_database_table_view_sort"
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Updates the view sort related to the provided value.",
            "in": "path",
            "name": "view_sort_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PatchedUpdateViewSort"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ViewSort"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_FIELD_NOT_IN_TABLE",
                    "ERROR_VIEW_SORT_FIELD_ALREADY_EXISTS"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_VIEW_SORT_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table view sortings"
        ],
        "description": "Updates the existing sort if the authorized user has access to the related database's group.",
        "operationId": "update_database_table_view_sort"
      }
    },
    "/api/database/views/table/{table_id}/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A comma separated list of extra attributes to include on each view in the response. The supported attributes are `filters`, `sortings` and `decorations`. For example `include=filters,sortings` will add the attributes `filters` and `sortings` to every returned view, containing a list of the views filters and sortings respectively.",
            "in": "query",
            "name": "include",
            "type": "string"
          },
          {
            "description": "Returns only views of the table related to the provided value.",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/ViewView"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "tags": [
          "Database table views"
        ],
        "description": "Lists all views of the table related to the provided `table_id` if the user has access to the related database's group. If the group is related to a template, then this endpoint will be publicly accessible. A table can have multiple views. Each view can display the data in a different way. For example the `grid` view shows the in a spreadsheet like way. That type has custom endpoints for data retrieval and manipulation. In the future other views types like a calendar or Kanban are going to be added. Each type can have different properties.",
        "operationId": "list_database_table_views"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "A comma separated list of extra attributes to include on each view in the response. The supported attributes are `filters`, `sortings` and `decorations`. For example `include=filters,sortings` will add the attributes `filters` and `sortings` to every returned view, containing a list of the views filters and sortings respectively.",
            "in": "query",
            "name": "include",
            "type": "string"
          },
          {
            "description": "Creates a view for the table related to the provided value.",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ViewCreateView"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ViewView"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION",
                    "ERROR_FIELD_NOT_IN_TABLE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table views"
        ],
        "description": "Creates a new view for the table related to the provided `table_id` parameter if the authorized user has access to the related database's group. Depending on the type, different properties can optionally be set.",
        "operationId": "create_database_table_view"
      }
    },
    "/api/database/views/table/{table_id}/order/": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Updates the order of the views in the table related to the provided value.",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderViews"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_VIEW_NOT_IN_TABLE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table views"
        ],
        "description": "Changes the order of the provided view ids to the matching position that the id has in the list. If the authorized user does not belong to the group it will be ignored. The order of the not provided views will be set to `0`.",
        "operationId": "order_database_table_views"
      }
    },
    "/api/database/views/{slug}/link-row-field-lookup/{field_id}/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The field id of the link row field.",
            "in": "path",
            "name": "field_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The slug related to the view.",
            "in": "path",
            "name": "slug",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PaginationSerializerLinkRowValue"
            }
          },
          "401": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_NO_AUTHORIZATION_TO_PUBLICLY_SHARED_VIEW"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_VIEW_DOES_NOT_EXIST",
                    "ERROR_FIELD_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "tags": [
          "Database table views"
        ],
        "description": "If the view is publicly shared or if an authenticated user has access to the related group, then this endpoint can be used to do a value lookup of the link row fields that are included in the view. Normally it is not possible for a not authenticated visitor to fetch the rows of a table. This endpoint makes it possible to fetch the id and primary field value of the related table of a link row included in the view.",
        "operationId": "database_table_public_view_link_row_field_lookup"
      }
    },
    "/api/database/views/{slug}/public/auth/": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The slug of the grid view to get public information about.",
            "in": "path",
            "name": "slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PublicViewAuthRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PublicViewAuthResponse"
            }
          },
          "401": {
            "description": "",
            "schema": {
              "description": "The password provided for this view is incorrect"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_VIEW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "tags": [
          "Database table views"
        ],
        "description": "Returns a valid never-expiring JWT token for this public shared view if the password provided matches with the one saved by the view's owner.",
        "operationId": "public_view_token_auth"
      }
    },
    "/api/database/views/{view_id}/": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Deletes the view related to the provided value.",
            "in": "path",
            "name": "view_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_VIEW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table views"
        ],
        "description": "Deletes the existing view if the authorized user has access to the related database's group. Note that all the related settings of the view are going to be deleted also. The data stays intact after deleting the view because this is related to the table and not the view.",
        "operationId": "delete_database_table_view"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A comma separated list of extra attributes to include on the returned view. The supported attributes are `filters`, `sortings` and `decorations`. For example `include=filters,sortings` will add the attributes `filters` and `sortings` to every returned view, containing a list of the views filters and sortings respectively.",
            "in": "query",
            "name": "include",
            "type": "string"
          },
          {
            "description": "Returns the view related to the provided value.",
            "in": "path",
            "name": "view_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ViewView"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_VIEW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table views"
        ],
        "description": "Returns the existing view if the authorized user has access to the related database's group. Depending on the type different propertiescould be returned.",
        "operationId": "get_database_table_view"
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "A comma separated list of extra attributes to include on the returned view. The supported attributes are `filters`, `sortings` and `decorations`. For example `include=filters,sortings` will add the attributes `filters` and `sortings` to every returned view, containing a list of the views filters and sortings respectively.",
            "in": "query",
            "name": "include",
            "type": "string"
          },
          {
            "description": "Updates the view related to the provided value.",
            "in": "path",
            "name": "view_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PatchedViewUpdateView"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ViewView"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION",
                    "ERROR_FIELD_NOT_IN_TABLE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_VIEW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table views"
        ],
        "description": "Updates the existing view if the authorized user has access to the related database's group. The type cannot be changed. It depends on the existing type which properties can be changed.",
        "operationId": "update_database_table_view"
      }
    },
    "/api/database/views/{view_id}/decorations/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Returns only decoration of the view given to the provided value.",
            "in": "path",
            "name": "view_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/Decorator_Value_Provider_TypeViewDecoration"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_VIEW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table view decorations"
        ],
        "description": "Lists all decorations of the view related to the provided `view_id` if the user has access to the related database's group. A view can have multiple decorations. View decorators can be used to decorate rows. This can, for example, be used to change the border or background color of a row if it matches certain conditions.",
        "operationId": "list_database_table_view_decorations"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Creates a decoration for the view related to the given value.",
            "in": "path",
            "name": "view_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Decorator_Value_Provider_TypeCreateViewDecoration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Decorator_Value_Provider_TypeViewDecoration"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_VIEW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table view decorations"
        ],
        "description": "Creates a new decoration for the view related to the provided `view_id` parameter if the authorized user has access to the related database's group.",
        "operationId": "create_database_table_view_decoration"
      }
    },
    "/api/database/views/{view_id}/field-options/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Responds with field options related to the provided value.",
            "in": "path",
            "name": "view_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ViewFieldOptions"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_VIEW_DOES_NOT_SUPPORT_FIELD_OPTIONS"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_VIEW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table views"
        ],
        "description": "Responds with the fields options of the provided view if the authenticated user has access to the related group.",
        "operationId": "get_database_table_view_field_options"
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Updates the field options related to the provided value.",
            "in": "path",
            "name": "view_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PatchedViewFieldOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ViewFieldOptions"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_VIEW_DOES_NOT_SUPPORT_FIELD_OPTIONS"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_VIEW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table views"
        ],
        "description": "Updates the field options of a view. The field options differ per field type  This could for example be used to update the field width of a `grid` view if the user changes it.",
        "operationId": "update_database_table_view_field_options"
      }
    },
    "/api/database/views/{view_id}/filters/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Returns only filters of the view related to the provided value.",
            "in": "path",
            "name": "view_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/ViewFilter"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_VIEW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table view filters"
        ],
        "description": "Lists all filters of the view related to the provided `view_id` if the user has access to the related database's group. A view can have multiple filters. When all the rows are requested for the view only those that apply to the filters are returned.",
        "operationId": "list_database_table_view_filters"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Creates a filter for the view related to the provided value.",
            "in": "path",
            "name": "view_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateViewFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ViewFilter"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION",
                    "ERROR_FIELD_NOT_IN_TABLE",
                    "ERROR_VIEW_FILTER_NOT_SUPPORTED",
                    "ERROR_VIEW_FILTER_TYPE_UNSUPPORTED_FIELD"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_VIEW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table view filters"
        ],
        "description": "Creates a new filter for the view related to the provided `view_id` parameter if the authorized user has access to the related database's group. When the rows of a view are requested, for example via the `list_database_table_grid_view_rows` endpoint, then only the rows that apply to all the filters are going to be returned. A filter compares the value of a field to the value of a filter. It depends on the type how values are going to be compared.",
        "operationId": "create_database_table_view_filter"
      }
    },
    "/api/database/views/{view_id}/rotate-slug/": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Rotates the slug of the view related to the provided value.",
            "in": "path",
            "name": "view_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ViewView"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_CANNOT_SHARE_VIEW_TYPE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_VIEW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table views"
        ],
        "description": "Rotates the unique slug of the view by replacing it with a new value. This would mean that the publicly shared URL of the view will change. Anyone with the old URL won't be able to access the viewanymore. Only view types which are sharable can have their slugs rotated.",
        "operationId": "rotate_database_view_slug"
      }
    },
    "/api/database/views/{view_id}/sortings/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Returns only sortings of the view related to the provided value.",
            "in": "path",
            "name": "view_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/ViewSort"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_VIEW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table view sortings"
        ],
        "description": "Lists all sortings of the view related to the provided `view_id` if the user has access to the related database's group. A view can have multiple sortings. When all the rows are requested they will be in the desired order.",
        "operationId": "list_database_table_view_sortings"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Creates a sort for the view related to the provided value.",
            "in": "path",
            "name": "view_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateViewSort"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ViewSort"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION",
                    "ERROR_VIEW_SORT_NOT_SUPPORTED",
                    "ERROR_FIELD_NOT_IN_TABLE",
                    "ERROR_VIEW_SORT_FIELD_ALREADY_EXISTS",
                    "ERROR_VIEW_SORT_FIELD_NOT_SUPPORTED"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_VIEW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table view sortings"
        ],
        "description": "Creates a new sort for the view related to the provided `view_id` parameter if the authorized user has access to the related database's group. When the rows of a view are requested, for example via the `list_database_table_grid_view_rows` endpoint, they will be returned in the respected order defined by all the sortings.",
        "operationId": "create_database_table_view_sort"
      }
    },
    "/api/database/webhooks/table/{table_id}/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Returns only webhooks of the table related to this value.",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/TableWebhook"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table webhooks"
        ],
        "description": "Lists all webhooks of the table related to the provided `table_id` if the user has access to the related database group.",
        "operationId": "list_database_table_webhooks"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Creates a webhook for the table related to the provided value.",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TableWebhookCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TableWebhook"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_TABLE_WEBHOOK_MAX_LIMIT_EXCEEDED"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table webhooks"
        ],
        "description": "Creates a new webhook for the table related to the provided `table_id` parameter if the authorized user has access to the related database group.",
        "operationId": "create_database_table_webhook"
      }
    },
    "/api/database/webhooks/table/{table_id}/test-call/": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The id of the table that must be tested.",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TableWebhookTestCallRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TableWebhookTestCallResponse"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table webhooks"
        ],
        "description": "This endpoint triggers a test call based on the provided data if the user has access to the group related to the table. The test call will be made immediately and a copy of the request, response and status will be included in the response.",
        "operationId": "test_call_database_table_webhook"
      }
    },
    "/api/database/webhooks/{webhook_id}/": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Deletes the webhook related to the provided value.",
            "in": "path",
            "name": "webhook_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_WEBHOOK_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table webhooks"
        ],
        "description": "Deletes the existing webhook if the authorized user has access to the related database's group.",
        "operationId": "delete_database_table_webhook"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Returns the webhook related to the provided value.",
            "in": "path",
            "name": "webhook_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TableWebhook"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_WEBHOOK_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table webhooks"
        ],
        "description": "Returns the existing webhook if the authorized user has access to the related database group.",
        "operationId": "get_database_table_webhook"
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Updates the webhook related to the provided value.",
            "in": "path",
            "name": "webhook_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PatchedTableWebhookUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TableWebhook"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_WEBHOOK_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table webhooks"
        ],
        "description": "Updates the existing view if the authorized user has access to the related database group.",
        "operationId": "update_database_table_webhook"
      }
    },
    "/api/groups/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "properties": {
                  "id": {
                    "description": "The unique identifier of the group.",
                    "example": 1,
                    "type": "integer"
                  },
                  "name": {
                    "description": "The name given to the group.",
                    "example": "Bram's group",
                    "type": "string"
                  },
                  "order": {
                    "description": "The order of the group, lowest first.",
                    "example": 0,
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Groups"
        ],
        "description": "Lists all the groups of the authorized user. A group can contain multiple applications like a database. Multiple users can have access to a group. For example each company could have their own group containing databases related to that company. The order of the groups are custom for each user. The order is configurable via the **order_groups** endpoint.",
        "operationId": "list_groups"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "properties": {
                "id": {
                  "description": "The unique identifier of the group.",
                  "example": 1,
                  "type": "integer"
                },
                "name": {
                  "description": "The name given to the group.",
                  "example": "Bram's group",
                  "type": "string"
                },
                "order": {
                  "description": "The order of the group, lowest first.",
                  "example": 0,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Groups"
        ],
        "description": "Creates a new group where only the authorized user has access to. No initial data like database applications are added, they have to be created via other endpoints.",
        "operationId": "create_group"
      }
    },
    "/api/groups/invitations/group/{group_id}/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Returns only invitations that are in the group related to the provided value.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/GroupInvitation"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_USER_INVALID_GROUP_PERMISSIONS"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GROUP_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Group invitations"
        ],
        "description": "Lists all the group invitations of the group related to the provided `group_id` parameter if the authorized user has admin rights to that group.",
        "operationId": "list_group_invitations"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Creates a group invitation to the group related to the provided value.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateGroupInvitation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GroupInvitation"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_USER_INVALID_GROUP_PERMISSIONS",
                    "ERROR_REQUEST_BODY_VALIDATION"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GROUP_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Group invitations"
        ],
        "description": "Creates a new group invitations for an email address if the authorized user has admin rights to the related group. An email containing a sign up link will be send to the user.",
        "operationId": "create_group_invitation"
      }
    },
    "/api/groups/invitations/token/{token}/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Returns the group invitation related to the provided token.",
            "in": "path",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserGroupInvitation"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "BAD_TOKEN_SIGNATURE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GROUP_INVITATION_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "tags": [
          "Group invitations"
        ],
        "description": "Responds with the serialized group invitation if an invitation with the provided token is found.",
        "operationId": "get_group_invitation_by_token"
      }
    },
    "/api/groups/invitations/{group_invitation_id}/": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Deletes the group invitation related to the provided value.",
            "in": "path",
            "name": "group_invitation_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_USER_INVALID_GROUP_PERMISSIONS"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GROUP_INVITATION_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Group invitations"
        ],
        "description": "Deletes a group invitation if the authorized user has admin rights to the related group.",
        "operationId": "delete_group_invitation"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Returns the group invitation related to the provided value.",
            "in": "path",
            "name": "group_invitation_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GroupInvitation"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_USER_INVALID_GROUP_PERMISSIONS"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GROUP_INVITATION_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Group invitations"
        ],
        "description": "Returns the requested group invitation if the authorized user has admin right to the related group",
        "operationId": "get_group_invitation"
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Updates the group invitation related to the provided value.",
            "in": "path",
            "name": "group_invitation_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PatchedUpdateGroupInvitation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GroupInvitation"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_USER_INVALID_GROUP_PERMISSIONS",
                    "ERROR_REQUEST_BODY_VALIDATION"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GROUP_INVITATION_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Group invitations"
        ],
        "description": "Updates the existing group invitation related to the provided `group_invitation_id` param if the authorized user has admin rights to the related group.",
        "operationId": "update_group_invitation"
      }
    },
    "/api/groups/invitations/{group_invitation_id}/accept/": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Accepts the group invitation related to the provided value.",
            "in": "path",
            "name": "group_invitation_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GroupUserGroup"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GROUP_INVITATION_EMAIL_MISMATCH"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GROUP_INVITATION_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Group invitations"
        ],
        "description": "Accepts a group invitation with the given id if the email address of the user matches that of the invitation.",
        "operationId": "accept_group_invitation"
      }
    },
    "/api/groups/invitations/{group_invitation_id}/reject/": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Rejects the group invitation related to the provided value.",
            "in": "path",
            "name": "group_invitation_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GROUP_INVITATION_EMAIL_MISMATCH"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GROUP_INVITATION_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Group invitations"
        ],
        "description": "Rejects a group invitation with the given id if the email address of the user matches that of the invitation.",
        "operationId": "reject_group_invitation"
      }
    },
    "/api/groups/order/": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderGroups"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Groups"
        ],
        "description": "Changes the order of the provided group ids to the matching position that the id has in the list. If the authorized user does not belong to the group it will be ignored. The order will be custom for each user.",
        "operationId": "order_groups"
      }
    },
    "/api/groups/users/group/{group_id}/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Updates the group user related to the provided value.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/GroupUser"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_USER_INVALID_GROUP_PERMISSIONS"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GROUP_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Groups"
        ],
        "description": "Lists all the users that are in a group if the authorized user has admin permissions to the related group. To add a user to a group an invitation must be send first.",
        "operationId": "list_group_users"
      }
    },
    "/api/groups/users/{group_user_id}/": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Deletes the group user related to the provided value.",
            "in": "path",
            "name": "group_user_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_USER_INVALID_GROUP_PERMISSIONS"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GROUP_INVITATION_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Groups"
        ],
        "description": "Deletes a group user if the authorized user has admin rights to the related group.",
        "operationId": "delete_group_user"
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Updates the group user related to the provided value.",
            "in": "path",
            "name": "group_user_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PatchedUpdateGroupUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GroupUserGroup"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_USER_INVALID_GROUP_PERMISSIONS",
                    "ERROR_REQUEST_BODY_VALIDATION"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GROUP_USER_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Groups"
        ],
        "description": "Updates the existing group user related to the provided `group_user_id` param if the authorized user has admin rights to the related group.",
        "operationId": "update_group_user"
      }
    },
    "/api/groups/{group_id}/": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Deletes the group related to the provided value.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "properties": {
                "id": {
                  "description": "The unique identifier of the group.",
                  "example": 1,
                  "type": "integer"
                },
                "name": {
                  "description": "The name given to the group.",
                  "example": "Bram's group",
                  "type": "string"
                },
                "order": {
                  "description": "The order of the group, lowest first.",
                  "example": 0,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION",
                    "ERROR_USER_INVALID_GROUP_PERMISSIONS",
                    "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GROUP_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Groups"
        ],
        "description": "Deletes an existing group if the authorized user belongs to the group. All the applications, databases, tables etc that were in the group are going to be deleted also.",
        "operationId": "delete_group"
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "type": "string"
          },
          {
            "description": "Updates the group related to the provided value.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PatchedGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION",
                    "ERROR_USER_INVALID_GROUP_PERMISSIONS"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GROUP_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Groups"
        ],
        "description": "Updates the existing group related to the provided `group_id` parameter if the authorized user belongs to the group. It is not yet possible to add additional users to a group.",
        "operationId": "update_group"
      }
    },
    "/api/groups/{group_id}/leave/": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Leaves the group related to the value.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_GROUP_USER_IS_LAST_ADMIN"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GROUP_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Groups"
        ],
        "description": "Makes the authenticated user leave the group related to the provided `group_id` if the user is in that group. If the user is the last admin in the group, he will not be able to leave it. There must always be one admin in the group, otherwise it will be left without control. If that is the case, he must either delete the group or give another member admin permissions first.",
        "operationId": "leave_group"
      }
    },
    "/api/licenses/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/PremiumLicense"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Admin"
        ],
        "description": "Lists all the valid licenses that are registered to this instance. A premium license can be used to unlock the premium features for a fixed amount of users. More information about self hosted licenses can be found on our pricing page https://baserow.io/pricing.",
        "operationId": "admin_premium_licenses"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterPremiumLicense"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PremiumLicense"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_INVALID_PREMIUM_LICENSE",
                    "ERROR_UNSUPPORTED_PREMIUM_LICENSE",
                    "ERROR_PREMIUM_LICENSE_INSTANCE_ID_MISMATCH",
                    "ERROR_PREMIUM_LICENSE_HAS_EXPIRED",
                    "ERROR_PREMIUM_LICENSE_ALREADY_EXISTS"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Admin"
        ],
        "description": "Registers a new license. After registering you can assign users to the license that will be able to use the premium features while the license is active. If an existing license with the same `license_id` already exists and the provided license has been issued later than that one, the existing one will be upgraded.",
        "operationId": "admin_register_premium_license"
      }
    },
    "/api/licenses/{id}/": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The internal identifier of the license, this is `id` and not `license_id`.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_PREMIUM_LICENSE_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Admin"
        ],
        "description": "Removes the existing license related to the provided parameter. If the license is active, then all the users that are using the license will lose access to the premium version.",
        "operationId": "admin_remove_premium_license"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The internal identifier of the license.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PremiumLicenseWithUsers"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_PREMIUM_LICENSE_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Admin"
        ],
        "description": "Responds with detailed information about the license related to the provided parameter.",
        "operationId": "admin_get_premium_license"
      }
    },
    "/api/licenses/{id}/check/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The internal identifier of the license, this is `id` and not `license_id`.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PremiumLicenseWithUsers"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_PREMIUM_LICENSE_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Admin"
        ],
        "description": "This endpoint checks with the authority if the license needs to be updated. It also checks if the license is operating within its limits and might take action on that. It could also happen that the license has been deleted because there is an instance id mismatch or because it's invalid. In that case a `204` status code is returned.",
        "operationId": "admin_premium_license_check"
      }
    },
    "/api/licenses/{id}/fill-seats/": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The internal identifier of the license, this is `id` and not `license_id`.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/PremiumLicenseUser"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_PREMIUM_LICENSE_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Admin"
        ],
        "description": "Fills the remaining empty seats of the license with the first users that are found.",
        "operationId": "admin_fill_remaining_seats_of_premium_license"
      }
    },
    "/api/licenses/{id}/lookup-users/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The internal identifier of the license, this is `id` and not `license_id`.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Defines which page of users should be returned.",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "If provided, only users where the name or email contains the value are returned.",
            "in": "query",
            "name": "search",
            "type": "string"
          },
          {
            "description": "Defines how many users should be returned per page.",
            "in": "query",
            "name": "size",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PaginationSerializerPremiumLicenseUserLookup"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_PREMIUM_LICENSE_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Admin"
        ],
        "description": "This endpoint can be used to lookup users that must be added to a premium license. Users that are already in the license are not returned here. Optionally a `search` query parameter can be provided to filter the results.",
        "operationId": "admin_premium_license_lookup_users"
      }
    },
    "/api/licenses/{id}/remove-all-users/": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The internal identifier of the license, this is `id` and not `license_id`.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_PREMIUM_LICENSE_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Admin"
        ],
        "description": "Removes all the users the users that are on the license. This will empty all the seats.",
        "operationId": "admin_remove_all_users_from_premium_license"
      }
    },
    "/api/licenses/{id}/{user_id}/": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The internal identifier of the license, this is `id` and not `license_id`.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The ID of the user that must be removed from the license.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_PREMIUM_LICENSE_DOES_NOT_EXIST",
                    "ERROR_USER_NOT_FOUND"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Admin"
        ],
        "description": "Removes the user related to the provided parameter and to the license related to the parameter. This only happens if the user is on the license, otherwise nothing will happen.",
        "operationId": "admin_remove_user_from_premium_license"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The internal identifier of the license, this is `id` and not `license_id`.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The ID of the user that must be added to the license.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PremiumLicenseUser"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_ALREADY_ON_PREMIUM_LICENSE",
                    "ERROR_NO_SEATS_LEFT_IN_PREMIUM_LICENSE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_PREMIUM_LICENSE_DOES_NOT_EXIST",
                    "ERROR_USER_NOT_FOUND"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Admin"
        ],
        "description": "Adds the user related to the provided parameter and to the license related to the parameter. This only happens if there are enough seats left on the license and if the user is not already on the license.",
        "operationId": "admin_add_user_to_premium_license"
      }
    },
    "/api/row_comments/{table_id}/{row_id}/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Defines how many rows should be returned.",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "Can only be used in combination with the `limit` parameter and defines from which offset the rows should be returned.",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "description": "Defines which page of rows should be returned. Either the `page` or `limit` can be provided, not both.",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The row to get row comments for.",
            "in": "path",
            "name": "row_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Can only be used in combination with the `page` parameter and defines how many rows should be returned.",
            "in": "query",
            "name": "size",
            "type": "integer"
          },
          {
            "description": "The table the row is in.",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PaginationSerializerRowComment"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST",
                    "ERROR_ROW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table rows"
        ],
        "description": "Returns all row comments for the specified table and row.",
        "operationId": "get_row_comments"
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The row to create a comment for.",
            "in": "path",
            "name": "row_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The table to find the row to comment on in.",
            "in": "path",
            "name": "table_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RowCommentCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RowComment"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST",
                    "ERROR_ROW_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Database table rows"
        ],
        "description": "Creates a comment on the specified row.",
        "operationId": "create_row_comment"
      }
    },
    "/api/settings/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Settings"
            }
          }
        },
        "tags": [
          "Settings"
        ],
        "description": "Responds with all the admin configured settings.",
        "operationId": "get_settings"
      }
    },
    "/api/settings/instance-id/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/InstanceId"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Settings"
        ],
        "description": "Responds with the self hosted instance id. Only a user with staff permissions can request it.",
        "operationId": "get_instance_id"
      }
    },
    "/api/settings/update/": {
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PatchedSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Settings"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Settings"
        ],
        "description": "Updates the admin configured settings if the user has admin permissions.",
        "operationId": "update_settings"
      }
    },
    "/api/templates/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/TemplateCategories"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "JWT": []
          },
          {}
        ],
        "tags": [
          "Templates"
        ],
        "description": "Lists all the template categories and the related templates that are in that category. The template's `group_id` can be used for previewing purposes because that group contains the applications that are in the template. All the `get` and `list` endpoints related to that group are publicly accessible.",
        "operationId": "list_templates"
      }
    },
    "/api/templates/install/{group_id}/{template_id}/": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The id related to the group where the template applications must be installed into.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The id related to the template that must be installed.",
            "in": "path",
            "name": "template_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/Applications"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_TEMPLATE_FILE_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GROUP_DOES_NOT_EXIST",
                    "ERROR_TEMPLATE_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Templates"
        ],
        "description": "Installs the applications of the given template into the given group if the user has access to that group. The response contains those newly created applications.",
        "operationId": "install_template"
      }
    },
    "/api/trash/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TrashStructure"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Trash"
        ],
        "description": "Responds with the groups and applications available for the requesting user to inspect the trash contents of.",
        "operationId": "get_trash_structure"
      }
    },
    "/api/trash/group/{group_id}/": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Optionally filters down the trash to delete to only items for this application in the group.",
            "in": "query",
            "name": "application_id",
            "type": "integer"
          },
          {
            "description": "The group whose trash contents to empty, including the group itself if it is also trashed.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_APPLICATION_NOT_IN_GROUP",
                    "ERROR_GROUP_DOES_NOT_EXIST",
                    "ERROR_APPLICATION_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Trash"
        ],
        "description": "Empties the specified group and/or application of trash, including the group and application themselves if they are trashed also.",
        "operationId": "empty_contents"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Optionally filters down the trash to only items for this application in the group.",
            "in": "query",
            "name": "application_id",
            "type": "integer"
          },
          {
            "description": "Returns the trash for the group with this id.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Selects which page of trash contents should be returned.",
            "in": "query",
            "name": "page",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PaginationSerializerTrashContents"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_APPLICATION_NOT_IN_GROUP",
                    "ERROR_GROUP_DOES_NOT_EXIST",
                    "ERROR_APPLICATION_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Trash"
        ],
        "description": "Responds with trash contents for a group optionally filtered to a specific application.",
        "operationId": "get_contents"
      }
    },
    "/api/trash/restore/": {
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PatchedTrashEntryRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_TRASH_ITEM_DOES_NOT_EXIST",
                    "ERROR_CANNOT_RESTORE_PARENT_BEFORE_CHILD",
                    "ERROR_PARENT_ID_MUST_NOT_BE_PROVIDED",
                    "ERROR_PARENT_ID_MUST_BE_PROVIDED",
                    "ERROR_CANT_RESTORE_AS_RELATED_TABLE_TRASHED"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "Trash"
        ],
        "description": "Restores the specified trashed item back into baserow.",
        "operationId": "restore"
      }
    },
    "/api/user-files/upload-file/": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserFile"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_INVALID_FILE",
                    "ERROR_FILE_SIZE_TOO_LARGE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "User files"
        ],
        "description": "Uploads a file to Baserow by uploading the file contents directly. A `file` multipart is expected containing the file contents.",
        "operationId": "upload_file"
      }
    },
    "/api/user-files/upload-via-url/": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserFileUploadViaURLRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserFile"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_INVALID_FILE",
                    "ERROR_FILE_SIZE_TOO_LARGE",
                    "ERROR_FILE_URL_COULD_NOT_BE_REACHED",
                    "ERROR_INVALID_FILE_URL"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "User files"
        ],
        "description": "Uploads a file to Baserow by downloading it from the provided URL.",
        "operationId": "upload_via_url"
      }
    },
    "/api/user/": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Register"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "properties": {
                "token": {
                  "type": "string"
                },
                "user": {
                  "description": "An object containing information related to the user.",
                  "properties": {
                    "first_name": {
                      "description": "The first name of related user.",
                      "type": "string"
                    },
                    "language": {
                      "description": "An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.",
                      "type": "string"
                    },
                    "username": {
                      "description": "The username of the related user. This is always an email address.",
                      "format": "email",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_ALREADY_EXISTS",
                    "ERROR_GROUP_INVITATION_DOES_NOT_EXISTERROR_REQUEST_BODY_VALIDATION",
                    "BAD_TOKEN_SIGNATURE"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_GROUP_INVITATION_DOES_NOT_EXIST"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "User"
        ],
        "description": "Creates a new user based on the provided values. If desired an authentication token can be generated right away. After creating an account the initial group containing a database is created.",
        "operationId": "create_user"
      }
    },
    "/api/user/account/": {
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PatchedAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_REQUEST_BODY_VALIDATION"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "User"
        ],
        "description": "Updates the account information of the authenticated user.",
        "operationId": "update_account"
      }
    },
    "/api/user/change-password/": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangePasswordBodyValidation"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_INVALID_OLD_PASSWORD",
                    "ERROR_REQUEST_BODY_VALIDATION"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "User"
        ],
        "description": "Changes the password of an authenticated user, but only if the old password matches.",
        "operationId": "change_password"
      }
    },
    "/api/user/dashboard/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Dashboard"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "User"
        ],
        "description": "Lists all the relevant user information that for example could be shown on a dashboard. It will contain all the pending group invitations for that user.",
        "operationId": "dashboard"
      }
    },
    "/api/user/redo/": {
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The particular client session to redo actions for. The actions must have been performed with this same header set with the same value for them to be redoable by this endpoint.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PatchedUndoRedoRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UndoRedoResponse"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "User"
        ],
        "description": "Redoes the latest redoable action performed by the user making the request. a ClientSessionId header must be provided and only actions which were performed the same user with the same ClientSessionId value set on the api request that performed the action will be redone.Additionally the ClientSessionId header must be between 1 and 256 characters long and must only contain alphanumeric or the - characters.",
        "operationId": "redo"
      }
    },
    "/api/user/reset-password/": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPasswordBodyValidation"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "BAD_TOKEN_SIGNATURE",
                    "EXPIRED_TOKEN_SIGNATURE",
                    "ERROR_USER_NOT_FOUND",
                    "ERROR_REQUEST_BODY_VALIDATION"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "User"
        ],
        "description": "Changes the password of a user if the reset token is valid. The **send_password_reset_email** endpoint sends an email to the user containing the token. That token can be used to change the password here without providing the old password.",
        "operationId": "reset_password"
      }
    },
    "/api/user/send-reset-password-email/": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SendResetPasswordEmailBodyValidation"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "400": {
            "description": "",
            "schema": {
              "properties": {
                "detail": {},
                "error": {
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_REQUEST_BODY_VALIDATION",
                    "ERROR_HOSTNAME_IS_NOT_ALLOWED"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "User"
        ],
        "description": "Sends an email containing the password reset link to the email address of the user. This will only be done if a user is found with the given email address. The endpoint will not fail if the email address is not found. The link is going to the valid for 48 hours.",
        "operationId": "send_password_reset_email"
      }
    },
    "/api/user/token-auth/": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NormalizedEmailWebToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "properties": {
                "token": {
                  "type": "string"
                },
                "user": {
                  "description": "An object containing information related to the user.",
                  "properties": {
                    "first_name": {
                      "description": "The first name of related user.",
                      "type": "string"
                    },
                    "language": {
                      "description": "An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.",
                      "type": "string"
                    },
                    "username": {
                      "description": "The username of the related user. This is always an email address.",
                      "format": "email",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "description": "A user with the provided username and password is not found."
            }
          }
        },
        "tags": [
          "User"
        ],
        "description": "Authenticates an existing user based on their username, which is their email address, and their password. If successful a JWT token will be generated that can be used to authorize for other endpoints that require authorization. The token will be valid for 60 minutes, so it has to be refreshed using the **token_refresh** endpoint before that time.",
        "operationId": "token_auth"
      }
    },
    "/api/user/token-refresh/": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RefreshAuthToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "properties": {
                "token": {
                  "type": "string"
                },
                "user": {
                  "description": "An object containing information related to the user.",
                  "properties": {
                    "first_name": {
                      "description": "The first name of related user.",
                      "type": "string"
                    },
                    "language": {
                      "description": "An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.",
                      "type": "string"
                    },
                    "username": {
                      "description": "The username of the related user. This is always an email address.",
                      "format": "email",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "description": "The token is invalid or expired."
            }
          }
        },
        "tags": [
          "User"
        ],
        "description": "Refreshes an existing JWT token. If the the token is valid, a new token will be included in the response. It will be valid for 60 minutes.",
        "operationId": "token_refresh"
      }
    },
    "/api/user/token-verify/": {
      "post": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VerifyAuthToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "properties": {
                "token": {
                  "type": "string"
                },
                "user": {
                  "description": "An object containing information related to the user.",
                  "properties": {
                    "first_name": {
                      "description": "The first name of related user.",
                      "type": "string"
                    },
                    "language": {
                      "description": "An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.",
                      "type": "string"
                    },
                    "username": {
                      "description": "The username of the related user. This is always an email address.",
                      "format": "email",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "",
            "schema": {
              "description": "The token is invalid or expired."
            }
          }
        },
        "tags": [
          "User"
        ],
        "description": "Verifies if the token is still valid.",
        "operationId": "token_verify"
      }
    },
    "/api/user/undo/": {
      "patch": {
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The particular client session to undo actions for. The actions must have been performed with this same header set with the same value for them to be undoable by this endpoint.",
            "format": "uuid",
            "in": "header",
            "name": "ClientSessionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PatchedUndoRedoRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UndoRedoResponse"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": [
          "User"
        ],
        "description": "undoes the latest undoable action performed by the user making the request. a ClientSessionId header must be provided and only actions which were performed the same user with the same ClientSessionId value set on the api request that performed the action will be undone.Additionally the ClientSessionId header must be between 1 and 256 characters long and must only contain alphanumeric or the - characters.",
        "operationId": "undo"
      }
    }
  },
  "definitions": {
    "Account": {
      "description": "This serializer must be kept in sync with `UserSerializer`.",
      "properties": {
        "first_name": {
          "maxLength": 150,
          "minLength": 2,
          "type": "string"
        },
        "language": {
          "description": "An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.",
          "maxLength": 10,
          "minLength": 2,
          "type": "string"
        }
      },
      "required": [
        "first_name"
      ],
      "type": "object"
    },
    "ActionScopesRequest": {
      "properties": {
        "application": {
          "description": "If set to an applications id then any actions directly related to that application will be be included when undoing or redoing.",
          "minimum": 0,
          "type": "integer",
          "x-nullable": true
        },
        "group": {
          "description": "If set to a groups id then any actions directly related to that group will be be included when undoing or redoing.",
          "minimum": 0,
          "type": "integer",
          "x-nullable": true
        },
        "root": {
          "description": "If set to true then actions registered in the root scope will be included when undoing or redoing.",
          "type": "boolean",
          "x-nullable": true
        },
        "table": {
          "description": "If set to a table id then any actions directly related to that table will be be included when undoing or redoing.",
          "minimum": 0,
          "type": "integer",
          "x-nullable": true
        },
        "view": {
          "description": "If set to an view id then any actions directly related to that view will be be included when undoing or redoing.",
          "minimum": 0,
          "type": "integer",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "AdminDashboard": {
      "properties": {
        "active_users_last_24_hours": {
          "type": "integer"
        },
        "active_users_last_30_days": {
          "type": "integer"
        },
        "active_users_last_7_days": {
          "type": "integer"
        },
        "active_users_per_day": {
          "items": {
            "$ref": "#/definitions/AdminDashboardPerDay"
          },
          "type": "array"
        },
        "new_users_last_24_hours": {
          "type": "integer"
        },
        "new_users_last_30_days": {
          "type": "integer"
        },
        "new_users_last_7_days": {
          "type": "integer"
        },
        "new_users_per_day": {
          "items": {
            "$ref": "#/definitions/AdminDashboardPerDay"
          },
          "type": "array"
        },
        "previous_active_users_last_24_hours": {
          "type": "integer"
        },
        "previous_active_users_last_30_days": {
          "type": "integer"
        },
        "previous_active_users_last_7_days": {
          "type": "integer"
        },
        "previous_new_users_last_24_hours": {
          "type": "integer"
        },
        "previous_new_users_last_30_days": {
          "type": "integer"
        },
        "previous_new_users_last_7_days": {
          "type": "integer"
        },
        "total_applications": {
          "type": "integer"
        },
        "total_groups": {
          "type": "integer"
        },
        "total_users": {
          "type": "integer"
        }
      },
      "required": [
        "active_users_last_24_hours",
        "active_users_last_30_days",
        "active_users_last_7_days",
        "active_users_per_day",
        "new_users_last_24_hours",
        "new_users_last_30_days",
        "new_users_last_7_days",
        "new_users_per_day",
        "previous_active_users_last_24_hours",
        "previous_active_users_last_30_days",
        "previous_active_users_last_7_days",
        "previous_new_users_last_24_hours",
        "previous_new_users_last_30_days",
        "previous_new_users_last_7_days",
        "total_applications",
        "total_groups",
        "total_users"
      ],
      "type": "object"
    },
    "AdminDashboardPerDay": {
      "properties": {
        "count": {
          "type": "integer"
        },
        "date": {
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "count",
        "date"
      ],
      "type": "object"
    },
    "AggregationRawTypeEnum": {
      "enum": [
        "empty_count",
        "not_empty_count",
        "unique_count",
        "min",
        "max",
        "sum",
        "average",
        "median",
        "decile",
        "variance",
        "std_dev"
      ],
      "type": "string"
    },
    "AirtableImportJob": {
      "properties": {
        "airtable_share_id": {
          "description": "Public ID of the shared Airtable base that must be imported.",
          "maxLength": 18,
          "type": "string"
        },
        "database": {
          "$ref": "#/definitions/Application"
        },
        "group_id": {
          "description": "The group where the Airtable base must be imported into.",
          "readOnly": true,
          "type": "integer"
        },
        "human_readable_error": {
          "description": "A human readable error message indicating what went wrong.",
          "type": "string"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "progress_percentage": {
          "description": "A percentage indicating how far along the import job is. 100 means that it's finished.",
          "type": "integer"
        },
        "state": {
          "description": "Indicates the state of the import job.",
          "type": "string"
        },
        "timezone": {
          "maxLength": 255,
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "airtable_share_id",
        "database",
        "group_id",
        "id",
        "progress_percentage",
        "state"
      ],
      "type": "object"
    },
    "Application": {
      "properties": {
        "group": {
          "allOf": [
            {
              "$ref": "#/definitions/Group"
            }
          ],
          "description": "The group that the application belongs to."
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 160,
          "type": "string"
        },
        "order": {
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "type": {
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "group",
        "id",
        "name",
        "order",
        "type"
      ],
      "type": "object"
    },
    "ApplicationCreate": {
      "properties": {
        "name": {
          "maxLength": 160,
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/ApplicationCreateTypeEnum"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "ApplicationCreateTypeEnum": {
      "enum": [
        "database"
      ],
      "type": "string"
    },
    "Applications": {},
    "ArrayFormulaTypeEnum": {
      "enum": [
        "invalid",
        "text",
        "char",
        "date_interval",
        "date",
        "boolean",
        "number",
        "single_select"
      ],
      "type": "string"
    },
    "BaseExporterOptions": {
      "properties": {
        "export_charset": {
          "allOf": [
            {
              "$ref": "#/definitions/ExportCharsetEnum"
            }
          ],
          "default": "utf-8",
          "description": "The character set to use when creating the export file."
        },
        "exporter_type": {
          "allOf": [
            {
              "$ref": "#/definitions/ExporterTypeEnum"
            }
          ],
          "description": "The file type to export to."
        },
        "view_id": {
          "description": "Optional: The view for this table to export using its filters, sorts and other view specific settings.",
          "minimum": 0,
          "type": "integer",
          "x-nullable": true
        }
      },
      "required": [
        "exporter_type"
      ],
      "type": "object"
    },
    "BatchDeleteRows": {
      "properties": {
        "items": {
          "items": {
            "type": "integer"
          },
          "maxItems": 200,
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "BlankEnum": {
      "enum": [
        ""
      ]
    },
    "BooleanFieldCreateField": {
      "properties": {
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "BooleanFieldField": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "BooleanFieldFieldSerializerWithRelatedFields": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "related_fields": {
          "description": "A list of related fields which also changed.",
          "items": {
            "$ref": "#/definitions/Field"
          },
          "readOnly": true,
          "type": "array"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "related_fields",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "BooleanFieldUpdateField": {
      "properties": {
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "type": "object"
    },
    "ChangePasswordBodyValidation": {
      "properties": {
        "new_password": {
          "type": "string"
        },
        "old_password": {
          "type": "string"
        }
      },
      "required": [
        "new_password",
        "old_password"
      ],
      "type": "object"
    },
    "ConditionalColorValueProviderConfColor": {
      "properties": {
        "color": {
          "description": "The color the decorator should take if the defined conditions apply.",
          "type": "string"
        },
        "filters": {
          "description": "A list of conditions that the row must meet to get the selected color. This list of conditions can be empty, in that case, this color will always match the row values.",
          "items": {
            "$ref": "#/definitions/ConditionalColorValueProviderConfColorFilter"
          },
          "type": "array"
        },
        "operator": {
          "allOf": [
            {
              "$ref": "#/definitions/OperatorEnum"
            }
          ],
          "default": "AND",
          "description": "The boolean operator used to group all conditions."
        }
      },
      "required": [
        "color",
        "filters"
      ],
      "type": "object"
    },
    "ConditionalColorValueProviderConfColorFilter": {
      "properties": {
        "field": {
          "description": "The field of which the value must be compared to the filter value.",
          "type": "integer",
          "x-nullable": true
        },
        "id": {
          "description": "A unique identifier for this condition.",
          "type": "string"
        },
        "type": {
          "description": "Indicates how the field's value must be compared to the filter's value. The filter is always in this order `field` `type` `value` (example: `field_1` `contains` `Test`).",
          "x-nullable": true
        },
        "value": {
          "default": "",
          "description": "The field of which the value must be compared to the filter value.",
          "type": "string"
        }
      },
      "required": [
        "field",
        "id",
        "type"
      ],
      "type": "object"
    },
    "ConditionalColorValueProviderConfColors": {
      "properties": {
        "colors": {
          "description": "A list of color items. For each row, the value provider try to match the defined colors one by one in the given order. The first matching color is returned to the decorator.",
          "items": {
            "$ref": "#/definitions/ConditionalColorValueProviderConfColor"
          },
          "type": "array"
        }
      },
      "required": [
        "colors"
      ],
      "type": "object"
    },
    "CreateAirtableImportJob": {
      "properties": {
        "airtable_share_url": {
          "description": "The publicly shared URL of the Airtable base (e.g. https://airtable.com/shrxxxxxxxxxxxxxx)",
          "format": "uri",
          "type": "string"
        },
        "group_id": {
          "description": "The group ID where the Airtable base must be imported into.",
          "type": "integer"
        },
        "timezone": {
          "allOf": [
            {
              "$ref": "#/definitions/TimezoneEnum"
            }
          ],
          "description": "Optionally a timezone can be provided that must be respected during import. This is for example setting the correct value of the date fields."
        }
      },
      "required": [
        "airtable_share_url",
        "group_id"
      ],
      "type": "object"
    },
    "CreateGroupInvitation": {
      "properties": {
        "base_url": {
          "description": "The base URL where the user can publicly accept his invitation.The accept token is going to be appended to the base_url (base_url '/token').",
          "format": "uri",
          "type": "string"
        },
        "email": {
          "description": "The email address of the user that the invitation is meant for. Only a user with that email address can accept it.",
          "format": "email",
          "maxLength": 254,
          "type": "string"
        },
        "message": {
          "description": "An optional message that the invitor can provide. This will be visible to the receiver of the invitation.",
          "type": "string"
        },
        "permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/PermissionsEnum"
            }
          ],
          "description": "The permissions that the user is going to get within the group after accepting the invitation."
        }
      },
      "required": [
        "base_url",
        "email"
      ],
      "type": "object"
    },
    "CreateViewFilter": {
      "properties": {
        "field": {
          "description": "The field of which the value must be compared to the filter value.",
          "type": "integer"
        },
        "type": {
          "allOf": [
            {
              "$ref": "#/definitions/ViewFilterTypesEnum"
            }
          ],
          "description": "Indicates how the field's value must be compared to the filter's value. The filter is always in this order `field` `type` `value` (example: `field_1` `contains` `Test`)."
        },
        "value": {
          "default": "",
          "description": "The filter value that must be compared to the field's value.",
          "maxLength": 255,
          "type": "string"
        }
      },
      "required": [
        "field",
        "type"
      ],
      "type": "object"
    },
    "CreateViewSort": {
      "properties": {
        "field": {
          "description": "The field that must be sorted on.",
          "type": "integer"
        },
        "order": {
          "allOf": [
            {
              "$ref": "#/definitions/OrderEnum"
            }
          ],
          "default": "ASC",
          "description": "Indicates the sort order direction. ASC (Ascending) is from A to Z and DESC (Descending) is from Z to A."
        }
      },
      "required": [
        "field"
      ],
      "type": "object"
    },
    "CreatedOnFieldCreateField": {
      "properties": {
        "date_format": {
          "allOf": [
            {
              "$ref": "#/definitions/DateFormatEnum"
            }
          ],
          "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)"
        },
        "date_include_time": {
          "description": "Indicates if the field also includes a time.",
          "type": "boolean"
        },
        "date_time_format": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTimeFormatEnum"
            }
          ],
          "description": "24 (14:30) or 12 (02:30 PM)"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "timezone": {
          "$ref": "#/definitions/TimezoneEnum"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "required": [
        "name",
        "timezone",
        "type"
      ],
      "type": "object"
    },
    "CreatedOnFieldField": {
      "properties": {
        "date_format": {
          "allOf": [
            {
              "$ref": "#/definitions/DateFormatEnum"
            }
          ],
          "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)"
        },
        "date_include_time": {
          "description": "Indicates if the field also includes a time.",
          "type": "boolean"
        },
        "date_time_format": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTimeFormatEnum"
            }
          ],
          "description": "24 (14:30) or 12 (02:30 PM)"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "timezone": {
          "$ref": "#/definitions/TimezoneEnum"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "table_id",
        "timezone",
        "type"
      ],
      "type": "object"
    },
    "CreatedOnFieldFieldSerializerWithRelatedFields": {
      "properties": {
        "date_format": {
          "allOf": [
            {
              "$ref": "#/definitions/DateFormatEnum"
            }
          ],
          "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)"
        },
        "date_include_time": {
          "description": "Indicates if the field also includes a time.",
          "type": "boolean"
        },
        "date_time_format": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTimeFormatEnum"
            }
          ],
          "description": "24 (14:30) or 12 (02:30 PM)"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "related_fields": {
          "description": "A list of related fields which also changed.",
          "items": {
            "$ref": "#/definitions/Field"
          },
          "readOnly": true,
          "type": "array"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "timezone": {
          "$ref": "#/definitions/TimezoneEnum"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "related_fields",
        "table_id",
        "timezone",
        "type"
      ],
      "type": "object"
    },
    "CreatedOnFieldUpdateField": {
      "properties": {
        "date_format": {
          "allOf": [
            {
              "$ref": "#/definitions/DateFormatEnum"
            }
          ],
          "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)"
        },
        "date_include_time": {
          "description": "Indicates if the field also includes a time.",
          "type": "boolean"
        },
        "date_time_format": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTimeFormatEnum"
            }
          ],
          "description": "24 (14:30) or 12 (02:30 PM)"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "timezone": {
          "$ref": "#/definitions/TimezoneEnum"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "required": [
        "timezone"
      ],
      "type": "object"
    },
    "CsvColumnSeparatorEnum": {
      "enum": [
        ",",
        ";",
        "|",
        "tab",
        "record_separator",
        "unit_separator"
      ],
      "type": "string"
    },
    "CsvExporterOptions": {
      "properties": {
        "csv_column_separator": {
          "allOf": [
            {
              "$ref": "#/definitions/CsvColumnSeparatorEnum"
            }
          ],
          "default": ",",
          "description": "The value used to separate columns in the resulting csv file."
        },
        "csv_include_header": {
          "default": true,
          "description": "Whether or not to generate a header row at the top of the csv file.",
          "type": "boolean"
        },
        "export_charset": {
          "allOf": [
            {
              "$ref": "#/definitions/ExportCharsetEnum"
            }
          ],
          "default": "utf-8",
          "description": "The character set to use when creating the export file."
        },
        "exporter_type": {
          "allOf": [
            {
              "$ref": "#/definitions/ExporterTypeEnum"
            }
          ],
          "description": "The file type to export to."
        },
        "view_id": {
          "description": "Optional: The view for this table to export using its filters, sorts and other view specific settings.",
          "minimum": 0,
          "type": "integer",
          "x-nullable": true
        }
      },
      "required": [
        "exporter_type"
      ],
      "type": "object"
    },
    "Dashboard": {
      "properties": {
        "group_invitations": {
          "items": {
            "$ref": "#/definitions/UserGroupInvitation"
          },
          "type": "array"
        }
      },
      "required": [
        "group_invitations"
      ],
      "type": "object"
    },
    "DatabaseApplication": {
      "properties": {
        "group": {
          "allOf": [
            {
              "$ref": "#/definitions/Group"
            }
          ],
          "description": "The group that the application belongs to."
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 160,
          "type": "string"
        },
        "order": {
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "tables": {
          "description": "This field is specific to the `database` application and contains an array of tables that are in the database.",
          "items": {
            "$ref": "#/definitions/Table"
          },
          "readOnly": true,
          "type": "array"
        },
        "type": {
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "group",
        "id",
        "name",
        "order",
        "tables",
        "type"
      ],
      "type": "object"
    },
    "DateFieldCreateField": {
      "properties": {
        "date_format": {
          "allOf": [
            {
              "$ref": "#/definitions/DateFormatEnum"
            }
          ],
          "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)"
        },
        "date_include_time": {
          "description": "Indicates if the field also includes a time.",
          "type": "boolean"
        },
        "date_time_format": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTimeFormatEnum"
            }
          ],
          "description": "24 (14:30) or 12 (02:30 PM)"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "DateFieldField": {
      "properties": {
        "date_format": {
          "allOf": [
            {
              "$ref": "#/definitions/DateFormatEnum"
            }
          ],
          "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)"
        },
        "date_include_time": {
          "description": "Indicates if the field also includes a time.",
          "type": "boolean"
        },
        "date_time_format": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTimeFormatEnum"
            }
          ],
          "description": "24 (14:30) or 12 (02:30 PM)"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "DateFieldFieldSerializerWithRelatedFields": {
      "properties": {
        "date_format": {
          "allOf": [
            {
              "$ref": "#/definitions/DateFormatEnum"
            }
          ],
          "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)"
        },
        "date_include_time": {
          "description": "Indicates if the field also includes a time.",
          "type": "boolean"
        },
        "date_time_format": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTimeFormatEnum"
            }
          ],
          "description": "24 (14:30) or 12 (02:30 PM)"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "related_fields": {
          "description": "A list of related fields which also changed.",
          "items": {
            "$ref": "#/definitions/Field"
          },
          "readOnly": true,
          "type": "array"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "related_fields",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "DateFieldUpdateField": {
      "properties": {
        "date_format": {
          "allOf": [
            {
              "$ref": "#/definitions/DateFormatEnum"
            }
          ],
          "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)"
        },
        "date_include_time": {
          "description": "Indicates if the field also includes a time.",
          "type": "boolean"
        },
        "date_time_format": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTimeFormatEnum"
            }
          ],
          "description": "24 (14:30) or 12 (02:30 PM)"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "type": "object"
    },
    "DateFormatEnum": {
      "enum": [
        "EU",
        "US",
        "ISO"
      ],
      "type": "string"
    },
    "DateTimeFormatEnum": {
      "enum": [
        "24",
        "12"
      ],
      "type": "string"
    },
    "Decorator_Value_Provider_TypeCreateViewDecoration": {},
    "Decorator_Value_Provider_TypeViewDecoration": {},
    "EmailFieldCreateField": {
      "properties": {
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "EmailFieldField": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "EmailFieldFieldSerializerWithRelatedFields": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "related_fields": {
          "description": "A list of related fields which also changed.",
          "items": {
            "$ref": "#/definitions/Field"
          },
          "readOnly": true,
          "type": "array"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "related_fields",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "EmailFieldUpdateField": {
      "properties": {
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "type": "object"
    },
    "EventTypesEnum": {
      "enum": [
        "row.created",
        "row.updated",
        "row.deleted"
      ],
      "type": "string"
    },
    "ExampleBatchRowsRequest": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/ExampleRowRequestSerializerWithUserFieldNames"
          },
          "maxItems": 200,
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "ExampleBatchRowsResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/ExampleRowResponseSerializerWithUserFieldNames"
          },
          "maxItems": 200,
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "ExampleBatchUpdateRowRequestSerializerWithUserFieldNames": {
      "properties": {
        "field_1": {
          "description": "This field represents the `text` field. The number in field_1 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "type": "string",
          "x-nullable": true
        },
        "field_11": {
          "description": "This field represents the `link_row` field. The number in field_11 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `array` containing the ids of the related rows.The response contains a list of objects containing the `id` and the primary field's `value` as a string for display purposes.",
          "items": {
            "minimum": 0,
            "type": "integer"
          },
          "type": "array"
        },
        "field_12": {
          "description": "This field represents the `file` field. The number in field_12 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `array` containing objects with the name of the file. The response contains an `array` of more detailed objects related to the files.",
          "items": {
            "$ref": "#/definitions/FileFieldRequest"
          },
          "type": "array",
          "x-nullable": true
        },
        "field_13": {
          "description": "This field represents the `single_select` field. The number in field_13 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `integer` representing the chosen select option id related to the field. Available ids can be found when getting or listing the field. The response represents chosen field, but also the value and color is exposed.",
          "type": "integer",
          "x-nullable": true
        },
        "field_14": {
          "items": {
            "description": "This field represents the `multiple_select` field. The number in field_14 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts a list of `integer` each of which representing the chosen select option id related to the field. Available ids can be foundwhen getting or listing the field. The response represents chosen field, but also the value and color is exposed.",
            "type": "integer",
            "x-nullable": true
          },
          "type": "array"
        },
        "field_15": {
          "description": "This field represents the `phone_number` field. The number in field_15 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "maxLength": 100,
          "type": "string",
          "x-nullable": true
        },
        "field_2": {
          "description": "This field represents the `long_text` field. The number in field_2 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "type": "string",
          "x-nullable": true
        },
        "field_3": {
          "description": "This field represents the `url` field. The number in field_3 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "type": "string",
          "x-nullable": true
        },
        "field_4": {
          "description": "This field represents the `email` field. The number in field_4 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "maxLength": 254,
          "type": "string",
          "x-nullable": true
        },
        "field_5": {
          "description": "This field represents the `number` field. The number in field_5 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "format": "decimal",
          "pattern": "^\\d{0,50}(?:\\.\\d{0,0})?$",
          "type": "string",
          "x-nullable": true
        },
        "field_6": {
          "default": 0,
          "description": "This field represents the `rating` field. The number in field_6 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "maximum": 5,
          "minimum": 0,
          "type": "integer"
        },
        "field_7": {
          "default": false,
          "description": "This field represents the `boolean` field. The number in field_7 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "type": "boolean"
        },
        "field_8": {
          "description": "This field represents the `date` field. The number in field_8 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "format": "date",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "description": "The unique identifier of the row in the table.",
          "type": "integer"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "ExampleRowRequest": {
      "properties": {
        "field_1": {
          "description": "This field represents the `text` field. The number in field_1 is in a normal request or response the id of the field.",
          "type": "string",
          "x-nullable": true
        },
        "field_11": {
          "description": "This field represents the `link_row` field. The number in field_11 is in a normal request or response the id of the field.This field accepts an `array` containing the ids of the related rows.The response contains a list of objects containing the `id` and the primary field's `value` as a string for display purposes.",
          "items": {
            "minimum": 0,
            "type": "integer"
          },
          "type": "array"
        },
        "field_12": {
          "description": "This field represents the `file` field. The number in field_12 is in a normal request or response the id of the field.This field accepts an `array` containing objects with the name of the file. The response contains an `array` of more detailed objects related to the files.",
          "items": {
            "$ref": "#/definitions/FileFieldRequest"
          },
          "type": "array",
          "x-nullable": true
        },
        "field_13": {
          "description": "This field represents the `single_select` field. The number in field_13 is in a normal request or response the id of the field.This field accepts an `integer` representing the chosen select option id related to the field. Available ids can be found when getting or listing the field. The response represents chosen field, but also the value and color is exposed.",
          "type": "integer",
          "x-nullable": true
        },
        "field_14": {
          "items": {
            "description": "This field represents the `multiple_select` field. The number in field_14 is in a normal request or response the id of the field.This field accepts a list of `integer` each of which representing the chosen select option id related to the field. Available ids can be foundwhen getting or listing the field. The response represents chosen field, but also the value and color is exposed.",
            "type": "integer",
            "x-nullable": true
          },
          "type": "array"
        },
        "field_15": {
          "description": "This field represents the `phone_number` field. The number in field_15 is in a normal request or response the id of the field.",
          "maxLength": 100,
          "type": "string",
          "x-nullable": true
        },
        "field_2": {
          "description": "This field represents the `long_text` field. The number in field_2 is in a normal request or response the id of the field.",
          "type": "string",
          "x-nullable": true
        },
        "field_3": {
          "description": "This field represents the `url` field. The number in field_3 is in a normal request or response the id of the field.",
          "type": "string",
          "x-nullable": true
        },
        "field_4": {
          "description": "This field represents the `email` field. The number in field_4 is in a normal request or response the id of the field.",
          "maxLength": 254,
          "type": "string",
          "x-nullable": true
        },
        "field_5": {
          "description": "This field represents the `number` field. The number in field_5 is in a normal request or response the id of the field.",
          "format": "decimal",
          "pattern": "^\\d{0,50}(?:\\.\\d{0,0})?$",
          "type": "string",
          "x-nullable": true
        },
        "field_6": {
          "default": 0,
          "description": "This field represents the `rating` field. The number in field_6 is in a normal request or response the id of the field.",
          "maximum": 5,
          "minimum": 0,
          "type": "integer"
        },
        "field_7": {
          "default": false,
          "description": "This field represents the `boolean` field. The number in field_7 is in a normal request or response the id of the field.",
          "type": "boolean"
        },
        "field_8": {
          "description": "This field represents the `date` field. The number in field_8 is in a normal request or response the id of the field.",
          "format": "date",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "ExampleRowRequestSerializerWithUserFieldNames": {
      "properties": {
        "field_1": {
          "description": "This field represents the `text` field. The number in field_1 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "type": "string",
          "x-nullable": true
        },
        "field_11": {
          "description": "This field represents the `link_row` field. The number in field_11 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `array` containing the ids of the related rows.The response contains a list of objects containing the `id` and the primary field's `value` as a string for display purposes.",
          "items": {
            "minimum": 0,
            "type": "integer"
          },
          "type": "array"
        },
        "field_12": {
          "description": "This field represents the `file` field. The number in field_12 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `array` containing objects with the name of the file. The response contains an `array` of more detailed objects related to the files.",
          "items": {
            "$ref": "#/definitions/FileFieldRequest"
          },
          "type": "array",
          "x-nullable": true
        },
        "field_13": {
          "description": "This field represents the `single_select` field. The number in field_13 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `integer` representing the chosen select option id related to the field. Available ids can be found when getting or listing the field. The response represents chosen field, but also the value and color is exposed.",
          "type": "integer",
          "x-nullable": true
        },
        "field_14": {
          "items": {
            "description": "This field represents the `multiple_select` field. The number in field_14 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts a list of `integer` each of which representing the chosen select option id related to the field. Available ids can be foundwhen getting or listing the field. The response represents chosen field, but also the value and color is exposed.",
            "type": "integer",
            "x-nullable": true
          },
          "type": "array"
        },
        "field_15": {
          "description": "This field represents the `phone_number` field. The number in field_15 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "maxLength": 100,
          "type": "string",
          "x-nullable": true
        },
        "field_2": {
          "description": "This field represents the `long_text` field. The number in field_2 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "type": "string",
          "x-nullable": true
        },
        "field_3": {
          "description": "This field represents the `url` field. The number in field_3 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "type": "string",
          "x-nullable": true
        },
        "field_4": {
          "description": "This field represents the `email` field. The number in field_4 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "maxLength": 254,
          "type": "string",
          "x-nullable": true
        },
        "field_5": {
          "description": "This field represents the `number` field. The number in field_5 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "format": "decimal",
          "pattern": "^\\d{0,50}(?:\\.\\d{0,0})?$",
          "type": "string",
          "x-nullable": true
        },
        "field_6": {
          "default": 0,
          "description": "This field represents the `rating` field. The number in field_6 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "maximum": 5,
          "minimum": 0,
          "type": "integer"
        },
        "field_7": {
          "default": false,
          "description": "This field represents the `boolean` field. The number in field_7 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "type": "boolean"
        },
        "field_8": {
          "description": "This field represents the `date` field. The number in field_8 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "format": "date",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "ExampleRowResponse": {
      "properties": {
        "field_1": {
          "description": "This field represents the `text` field. The number in field_1 is in a normal request or response the id of the field.",
          "type": "string",
          "x-nullable": true
        },
        "field_10": {
          "description": "This field represents the `created_on` field. The number in field_10 is in a normal request or response the id of the field.",
          "format": "date-time",
          "type": "string"
        },
        "field_11": {
          "description": "This field represents the `link_row` field. The number in field_11 is in a normal request or response the id of the field.This field accepts an `array` containing the ids of the related rows.The response contains a list of objects containing the `id` and the primary field's `value` as a string for display purposes.",
          "items": {
            "$ref": "#/definitions/LinkRowValue"
          },
          "type": "array"
        },
        "field_12": {
          "description": "This field represents the `file` field. The number in field_12 is in a normal request or response the id of the field.This field accepts an `array` containing objects with the name of the file. The response contains an `array` of more detailed objects related to the files.",
          "items": {
            "$ref": "#/definitions/FileFieldResponse"
          },
          "type": "array"
        },
        "field_13": {
          "allOf": [
            {
              "$ref": "#/definitions/SelectOption"
            }
          ],
          "description": "This field represents the `single_select` field. The number in field_13 is in a normal request or response the id of the field.This field accepts an `integer` representing the chosen select option id related to the field. Available ids can be found when getting or listing the field. The response represents chosen field, but also the value and color is exposed.",
          "x-nullable": true
        },
        "field_14": {
          "description": "This field represents the `multiple_select` field. The number in field_14 is in a normal request or response the id of the field.This field accepts a list of `integer` each of which representing the chosen select option id related to the field. Available ids can be foundwhen getting or listing the field. The response represents chosen field, but also the value and color is exposed.",
          "items": {
            "$ref": "#/definitions/SelectOption"
          },
          "type": "array",
          "x-nullable": true
        },
        "field_15": {
          "description": "This field represents the `phone_number` field. The number in field_15 is in a normal request or response the id of the field.",
          "maxLength": 100,
          "type": "string",
          "x-nullable": true
        },
        "field_16": {
          "description": "This field represents the `formula` field. The number in field_16 is in a normal request or response the id of the field.",
          "type": "string",
          "x-nullable": true
        },
        "field_17": {
          "description": "This field represents the `lookup` field. The number in field_17 is in a normal request or response the id of the field.",
          "type": "string",
          "x-nullable": true
        },
        "field_2": {
          "description": "This field represents the `long_text` field. The number in field_2 is in a normal request or response the id of the field.",
          "type": "string",
          "x-nullable": true
        },
        "field_3": {
          "description": "This field represents the `url` field. The number in field_3 is in a normal request or response the id of the field.",
          "type": "string",
          "x-nullable": true
        },
        "field_4": {
          "description": "This field represents the `email` field. The number in field_4 is in a normal request or response the id of the field.",
          "maxLength": 254,
          "type": "string",
          "x-nullable": true
        },
        "field_5": {
          "description": "This field represents the `number` field. The number in field_5 is in a normal request or response the id of the field.",
          "format": "decimal",
          "pattern": "^\\d{0,50}(?:\\.\\d{0,0})?$",
          "type": "string",
          "x-nullable": true
        },
        "field_6": {
          "default": 0,
          "description": "This field represents the `rating` field. The number in field_6 is in a normal request or response the id of the field.",
          "maximum": 5,
          "minimum": 0,
          "type": "integer"
        },
        "field_7": {
          "default": false,
          "description": "This field represents the `boolean` field. The number in field_7 is in a normal request or response the id of the field.",
          "type": "boolean"
        },
        "field_8": {
          "description": "This field represents the `date` field. The number in field_8 is in a normal request or response the id of the field.",
          "format": "date",
          "type": "string",
          "x-nullable": true
        },
        "field_9": {
          "description": "This field represents the `last_modified` field. The number in field_9 is in a normal request or response the id of the field.",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "The unique identifier of the row in the table.",
          "type": "integer"
        },
        "order": {
          "description": "Indicates the position of the row, lowest first and highest last.",
          "format": "decimal",
          "pattern": "^\\d{0,20}(?:\\.\\d{0,20})?$",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "ExampleRowResponseSerializerWithUserFieldNames": {
      "properties": {
        "field_1": {
          "description": "This field represents the `text` field. The number in field_1 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "type": "string",
          "x-nullable": true
        },
        "field_10": {
          "description": "This field represents the `created_on` field. The number in field_10 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "format": "date-time",
          "type": "string"
        },
        "field_11": {
          "description": "This field represents the `link_row` field. The number in field_11 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `array` containing the ids of the related rows.The response contains a list of objects containing the `id` and the primary field's `value` as a string for display purposes.",
          "items": {
            "$ref": "#/definitions/LinkRowValue"
          },
          "type": "array"
        },
        "field_12": {
          "description": "This field represents the `file` field. The number in field_12 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `array` containing objects with the name of the file. The response contains an `array` of more detailed objects related to the files.",
          "items": {
            "$ref": "#/definitions/FileFieldResponse"
          },
          "type": "array"
        },
        "field_13": {
          "allOf": [
            {
              "$ref": "#/definitions/SelectOption"
            }
          ],
          "description": "This field represents the `single_select` field. The number in field_13 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `integer` representing the chosen select option id related to the field. Available ids can be found when getting or listing the field. The response represents chosen field, but also the value and color is exposed.",
          "x-nullable": true
        },
        "field_14": {
          "description": "This field represents the `multiple_select` field. The number in field_14 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts a list of `integer` each of which representing the chosen select option id related to the field. Available ids can be foundwhen getting or listing the field. The response represents chosen field, but also the value and color is exposed.",
          "items": {
            "$ref": "#/definitions/SelectOption"
          },
          "type": "array",
          "x-nullable": true
        },
        "field_15": {
          "description": "This field represents the `phone_number` field. The number in field_15 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "maxLength": 100,
          "type": "string",
          "x-nullable": true
        },
        "field_16": {
          "description": "This field represents the `formula` field. The number in field_16 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "type": "string",
          "x-nullable": true
        },
        "field_17": {
          "description": "This field represents the `lookup` field. The number in field_17 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "type": "string",
          "x-nullable": true
        },
        "field_2": {
          "description": "This field represents the `long_text` field. The number in field_2 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "type": "string",
          "x-nullable": true
        },
        "field_3": {
          "description": "This field represents the `url` field. The number in field_3 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "type": "string",
          "x-nullable": true
        },
        "field_4": {
          "description": "This field represents the `email` field. The number in field_4 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "maxLength": 254,
          "type": "string",
          "x-nullable": true
        },
        "field_5": {
          "description": "This field represents the `number` field. The number in field_5 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "format": "decimal",
          "pattern": "^\\d{0,50}(?:\\.\\d{0,0})?$",
          "type": "string",
          "x-nullable": true
        },
        "field_6": {
          "default": 0,
          "description": "This field represents the `rating` field. The number in field_6 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "maximum": 5,
          "minimum": 0,
          "type": "integer"
        },
        "field_7": {
          "default": false,
          "description": "This field represents the `boolean` field. The number in field_7 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "type": "boolean"
        },
        "field_8": {
          "description": "This field represents the `date` field. The number in field_8 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "format": "date",
          "type": "string",
          "x-nullable": true
        },
        "field_9": {
          "description": "This field represents the `last_modified` field. The number in field_9 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "The unique identifier of the row in the table.",
          "type": "integer"
        },
        "order": {
          "description": "Indicates the position of the row, lowest first and highest last.",
          "format": "decimal",
          "pattern": "^\\d{0,20}(?:\\.\\d{0,20})?$",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "Export": {},
    "ExportCharsetEnum": {
      "enum": [
        "utf-8",
        "iso-8859-6",
        "windows-1256",
        "iso-8859-4",
        "windows-1257",
        "iso-8859-14",
        "iso-8859-2",
        "windows-1250",
        "gbk",
        "gb18030",
        "big5",
        "koi8-r",
        "koi8-u",
        "iso-8859-5",
        "windows-1251",
        "x-mac-cyrillic",
        "iso-8859-7",
        "windows-1253",
        "iso-8859-8",
        "windows-1255",
        "euc-jp",
        "iso-2022-jp",
        "shift-jis",
        "euc-kr",
        "macintosh",
        "iso-8859-10",
        "iso-8859-16",
        "windows-874",
        "windows-1254",
        "windows-1258",
        "iso-8859-1",
        "windows-1252",
        "iso-8859-3"
      ],
      "type": "string"
    },
    "ExportJob": {
      "description": "When mixed in to a model serializer for an ExportJob this will add an url field\nwith the actual usable url of the export job's file (if it has one).",
      "properties": {
        "created_at": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "exported_file_name": {
          "type": "string",
          "x-nullable": true
        },
        "exporter_type": {
          "type": "string"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "progress_percentage": {
          "format": "float",
          "type": "number"
        },
        "status": {
          "$ref": "#/definitions/StatusEnum"
        },
        "table": {
          "type": "integer"
        },
        "url": {
          "format": "uri",
          "readOnly": true,
          "type": "string"
        },
        "view": {
          "type": "integer",
          "x-nullable": true
        }
      },
      "required": [
        "created_at",
        "exporter_type",
        "id",
        "status",
        "table",
        "url"
      ],
      "type": "object"
    },
    "ExporterTypeEnum": {
      "enum": [
        "csv",
        "json",
        "xml"
      ],
      "type": "string"
    },
    "Field": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "FieldCreateField": {},
    "FieldField": {},
    "FieldFieldSerializerWithRelatedFields": {},
    "FieldTypesEnum": {
      "enum": [
        "text",
        "long_text",
        "url",
        "email",
        "number",
        "rating",
        "boolean",
        "date",
        "last_modified",
        "created_on",
        "link_row",
        "file",
        "single_select",
        "multiple_select",
        "phone_number",
        "formula",
        "lookup"
      ],
      "type": "string"
    },
    "FileFieldCreateField": {
      "properties": {
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "FileFieldField": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "FileFieldFieldSerializerWithRelatedFields": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "related_fields": {
          "description": "A list of related fields which also changed.",
          "items": {
            "$ref": "#/definitions/Field"
          },
          "readOnly": true,
          "type": "array"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "related_fields",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "FileFieldRequest": {
      "properties": {
        "name": {
          "description": "Accepts the name of the already uploaded user file.",
          "type": "string"
        },
        "visible_name": {
          "description": "A visually editable name for the field.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "FileFieldResponse": {
      "properties": {
        "image_height": {
          "type": "integer"
        },
        "image_width": {
          "type": "integer"
        },
        "is_image": {
          "type": "boolean"
        },
        "mime_type": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "thumbnails": {
          "additionalProperties": {},
          "readOnly": true,
          "type": "object"
        },
        "uploaded_at": {
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "format": "uri",
          "readOnly": true,
          "type": "string"
        },
        "visible_name": {
          "type": "string"
        }
      },
      "required": [
        "image_height",
        "image_width",
        "is_image",
        "mime_type",
        "name",
        "size",
        "thumbnails",
        "uploaded_at",
        "url",
        "visible_name"
      ],
      "type": "object"
    },
    "FileFieldUpdateField": {
      "properties": {
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "type": "object"
    },
    "FilterTypeEnum": {
      "enum": [
        "AND",
        "OR"
      ],
      "type": "string"
    },
    "FormViewCreateView": {
      "properties": {
        "cover_image": {
          "allOf": [
            {
              "$ref": "#/definitions/UserFile"
            }
          ],
          "description": "The cover image that must be displayed at the top of the form.",
          "x-nullable": true
        },
        "description": {
          "description": "The description that is displayed at the beginning of the form.",
          "type": "string"
        },
        "filter_type": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterTypeEnum"
            }
          ],
          "description": "Indicates whether all the rows should apply to all filters (AND) or to any filter (OR)."
        },
        "filters_disabled": {
          "description": "Allows users to see results unfiltered while still keeping the filters saved for the view.",
          "type": "boolean"
        },
        "logo_image": {
          "allOf": [
            {
              "$ref": "#/definitions/UserFile"
            }
          ],
          "description": "The logo image that must be displayed at the top of the form.",
          "x-nullable": true
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "public": {
          "description": "Indicates whether the view is publicly accessible to visitors.",
          "type": "boolean"
        },
        "slug": {
          "description": "The unique slug that can be used to construct a public URL.",
          "readOnly": true,
          "type": "string"
        },
        "submit_action": {
          "allOf": [
            {
              "$ref": "#/definitions/SubmitActionEnum"
            }
          ],
          "description": "The action that must be performed after the visitor has filled out the form."
        },
        "submit_action_message": {
          "description": "If the `submit_action` is MESSAGE, then this message will be shown to the visitor after submitting the form.",
          "type": "string"
        },
        "submit_action_redirect_url": {
          "description": "If the `submit_action` is REDIRECT,then the visitors will be redirected to the this URL after submitting the form.",
          "format": "uri",
          "maxLength": 200,
          "type": "string"
        },
        "submit_text": {
          "description": "The text displayed on the submit button.",
          "type": "string"
        },
        "title": {
          "description": "The title that is displayed at the beginning of the form.",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/ViewTypesEnum"
        }
      },
      "required": [
        "name",
        "slug",
        "type"
      ],
      "type": "object"
    },
    "FormViewFieldOptions": {
      "properties": {
        "description": {
          "description": "If provided, then this value be will be shown under the field name.",
          "type": "string"
        },
        "enabled": {
          "description": "Indicates whether the field is included in the form.",
          "type": "boolean"
        },
        "name": {
          "description": "By default, the name of the related field will be shown to the visitor. Optionally another name can be used by setting this name.",
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "The order that the field has in the form. Lower value is first.",
          "maximum": 32767,
          "minimum": -32768,
          "type": "integer"
        },
        "required": {
          "description": "Indicates whether the field is required for the visitor to fill out.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "FormViewSubmitted": {
      "properties": {
        "submit_action": {
          "allOf": [
            {
              "$ref": "#/definitions/SubmitActionEnum"
            }
          ],
          "description": "The action that must be performed after the visitor has filled out the form."
        },
        "submit_action_message": {
          "description": "If the `submit_action` is MESSAGE, then this message will be shown to the visitor after submitting the form.",
          "type": "string"
        },
        "submit_action_redirect_url": {
          "description": "If the `submit_action` is REDIRECT,then the visitors will be redirected to the this URL after submitting the form.",
          "format": "uri",
          "maxLength": 200,
          "type": "string"
        }
      },
      "type": "object"
    },
    "FormViewView": {
      "properties": {
        "cover_image": {
          "allOf": [
            {
              "$ref": "#/definitions/UserFile"
            }
          ],
          "description": "The cover image that must be displayed at the top of the form.",
          "x-nullable": true
        },
        "decorations": {
          "items": {
            "$ref": "#/definitions/ViewDecoration"
          },
          "type": "array"
        },
        "description": {
          "description": "The description that is displayed at the beginning of the form.",
          "type": "string"
        },
        "filter_type": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterTypeEnum"
            }
          ],
          "description": "Indicates whether all the rows should apply to all filters (AND) or to any filter (OR)."
        },
        "filters": {
          "items": {
            "$ref": "#/definitions/ViewFilter"
          },
          "type": "array"
        },
        "filters_disabled": {
          "description": "Allows users to see results unfiltered while still keeping the filters saved for the view.",
          "type": "boolean"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "logo_image": {
          "allOf": [
            {
              "$ref": "#/definitions/UserFile"
            }
          ],
          "description": "The logo image that must be displayed at the top of the form.",
          "x-nullable": true
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "public": {
          "description": "Indicates whether the view is publicly accessible to visitors.",
          "type": "boolean"
        },
        "public_view_has_password": {
          "readOnly": true,
          "type": "boolean"
        },
        "slug": {
          "description": "The unique slug that can be used to construct a public URL.",
          "readOnly": true,
          "type": "string"
        },
        "sortings": {
          "items": {
            "$ref": "#/definitions/ViewSort"
          },
          "type": "array"
        },
        "submit_action": {
          "allOf": [
            {
              "$ref": "#/definitions/SubmitActionEnum"
            }
          ],
          "description": "The action that must be performed after the visitor has filled out the form."
        },
        "submit_action_message": {
          "description": "If the `submit_action` is MESSAGE, then this message will be shown to the visitor after submitting the form.",
          "type": "string"
        },
        "submit_action_redirect_url": {
          "description": "If the `submit_action` is REDIRECT,then the visitors will be redirected to the this URL after submitting the form.",
          "format": "uri",
          "maxLength": 200,
          "type": "string"
        },
        "submit_text": {
          "description": "The text displayed on the submit button.",
          "type": "string"
        },
        "table": {
          "$ref": "#/definitions/Table"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "title": {
          "description": "The title that is displayed at the beginning of the form.",
          "type": "string"
        },
        "type": {
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "public_view_has_password",
        "slug",
        "table",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "FormulaFieldCreateField": {
      "properties": {
        "array_formula_type": {
          "x-nullable": true
        },
        "date_format": {
          "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)",
          "x-nullable": true
        },
        "date_include_time": {
          "description": "Indicates if the field also includes a time.",
          "type": "boolean",
          "x-nullable": true
        },
        "date_time_format": {
          "description": "24 (14:30) or 12 (02:30 PM)",
          "x-nullable": true
        },
        "error": {
          "type": "string",
          "x-nullable": true
        },
        "formula": {
          "type": "string"
        },
        "formula_type": {
          "$ref": "#/definitions/FormulaTypeEnum"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "number_decimal_places": {
          "description": "The amount of digits allowed after the point.",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "required": [
        "formula",
        "name",
        "type"
      ],
      "type": "object"
    },
    "FormulaFieldField": {
      "properties": {
        "array_formula_type": {
          "x-nullable": true
        },
        "date_format": {
          "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)",
          "x-nullable": true
        },
        "date_include_time": {
          "description": "Indicates if the field also includes a time.",
          "type": "boolean",
          "x-nullable": true
        },
        "date_time_format": {
          "description": "24 (14:30) or 12 (02:30 PM)",
          "x-nullable": true
        },
        "error": {
          "type": "string",
          "x-nullable": true
        },
        "formula": {
          "type": "string"
        },
        "formula_type": {
          "$ref": "#/definitions/FormulaTypeEnum"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "number_decimal_places": {
          "description": "The amount of digits allowed after the point.",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "formula",
        "id",
        "name",
        "order",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "FormulaFieldFieldSerializerWithRelatedFields": {
      "properties": {
        "array_formula_type": {
          "x-nullable": true
        },
        "date_format": {
          "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)",
          "x-nullable": true
        },
        "date_include_time": {
          "description": "Indicates if the field also includes a time.",
          "type": "boolean",
          "x-nullable": true
        },
        "date_time_format": {
          "description": "24 (14:30) or 12 (02:30 PM)",
          "x-nullable": true
        },
        "error": {
          "type": "string",
          "x-nullable": true
        },
        "formula": {
          "type": "string"
        },
        "formula_type": {
          "$ref": "#/definitions/FormulaTypeEnum"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "number_decimal_places": {
          "description": "The amount of digits allowed after the point.",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "related_fields": {
          "description": "A list of related fields which also changed.",
          "items": {
            "$ref": "#/definitions/Field"
          },
          "readOnly": true,
          "type": "array"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "formula",
        "id",
        "name",
        "order",
        "related_fields",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "FormulaFieldUpdateField": {
      "properties": {
        "array_formula_type": {
          "x-nullable": true
        },
        "date_format": {
          "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)",
          "x-nullable": true
        },
        "date_include_time": {
          "description": "Indicates if the field also includes a time.",
          "type": "boolean",
          "x-nullable": true
        },
        "date_time_format": {
          "description": "24 (14:30) or 12 (02:30 PM)",
          "x-nullable": true
        },
        "error": {
          "type": "string",
          "x-nullable": true
        },
        "formula": {
          "type": "string"
        },
        "formula_type": {
          "$ref": "#/definitions/FormulaTypeEnum"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "number_decimal_places": {
          "description": "The amount of digits allowed after the point.",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "required": [
        "formula"
      ],
      "type": "object"
    },
    "FormulaTypeEnum": {
      "enum": [
        "invalid",
        "text",
        "char",
        "date_interval",
        "date",
        "boolean",
        "number",
        "array",
        "single_select"
      ],
      "type": "string"
    },
    "GalleryViewCreateView": {
      "properties": {
        "card_cover_image_field": {
          "description": "References a file field of which the first image must be shown as card cover image.",
          "type": "integer",
          "x-nullable": true
        },
        "filter_type": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterTypeEnum"
            }
          ],
          "description": "Indicates whether all the rows should apply to all filters (AND) or to any filter (OR)."
        },
        "filters_disabled": {
          "description": "Allows users to see results unfiltered while still keeping the filters saved for the view.",
          "type": "boolean"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/ViewTypesEnum"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "GalleryViewFieldOptions": {
      "properties": {
        "hidden": {
          "description": "Whether or not the field should be hidden in the card.",
          "type": "boolean"
        },
        "order": {
          "description": "The order that the field has in the form. Lower value is first.",
          "maximum": 32767,
          "minimum": -32768,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "GalleryViewView": {
      "properties": {
        "card_cover_image_field": {
          "description": "References a file field of which the first image must be shown as card cover image.",
          "type": "integer",
          "x-nullable": true
        },
        "decorations": {
          "items": {
            "$ref": "#/definitions/ViewDecoration"
          },
          "type": "array"
        },
        "filter_type": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterTypeEnum"
            }
          ],
          "description": "Indicates whether all the rows should apply to all filters (AND) or to any filter (OR)."
        },
        "filters": {
          "items": {
            "$ref": "#/definitions/ViewFilter"
          },
          "type": "array"
        },
        "filters_disabled": {
          "description": "Allows users to see results unfiltered while still keeping the filters saved for the view.",
          "type": "boolean"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "public_view_has_password": {
          "readOnly": true,
          "type": "boolean"
        },
        "sortings": {
          "items": {
            "$ref": "#/definitions/ViewSort"
          },
          "type": "array"
        },
        "table": {
          "$ref": "#/definitions/Table"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "public_view_has_password",
        "table",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "GeneretadConditional_colorCreateViewDecoration": {
      "properties": {
        "order": {
          "description": "The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first.",
          "maximum": 32767,
          "minimum": -32768,
          "type": "integer"
        },
        "type": {
          "allOf": [
            {
              "$ref": "#/definitions/TypeFc4Enum"
            }
          ],
          "description": "The decorator type. This is then interpreted by the frontend to display the decoration."
        },
        "value_provider_conf": {
          "allOf": [
            {
              "$ref": "#/definitions/ConditionalColorValueProviderConfColors"
            }
          ],
          "description": "The configuration of the value provider"
        },
        "value_provider_type": {
          "default": "",
          "description": "The value provider type that gives the value to the decorator."
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "GeneretadConditional_colorUpdateViewDecoration": {
      "properties": {
        "order": {
          "description": "The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first.",
          "maximum": 32767,
          "minimum": -32768,
          "type": "integer"
        },
        "type": {
          "allOf": [
            {
              "$ref": "#/definitions/TypeFc4Enum"
            }
          ],
          "description": "The decorator type. This is then interpreted by the frontend to display the decoration."
        },
        "value_provider_conf": {
          "allOf": [
            {
              "$ref": "#/definitions/ConditionalColorValueProviderConfColors"
            }
          ],
          "description": "The configuration of the value provider"
        },
        "value_provider_type": {
          "description": "The value provider type that gives the value to the decorator."
        }
      },
      "type": "object"
    },
    "GeneretadConditional_colorViewDecoration": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "order": {
          "description": "The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first.",
          "maximum": 32767,
          "minimum": -32768,
          "type": "integer"
        },
        "type": {
          "description": "The decorator type. This is then interpreted by the frontend to display the decoration.",
          "maxLength": 255,
          "type": "string"
        },
        "value_provider_conf": {
          "allOf": [
            {
              "$ref": "#/definitions/ConditionalColorValueProviderConfColors"
            }
          ],
          "description": "The configuration of the value provider"
        },
        "value_provider_type": {
          "description": "The value provider type that gives the value to the decorator.",
          "maxLength": 255,
          "type": "string"
        },
        "view": {
          "description": "The view to which the decoration applies. Each view can have his own decorations.",
          "type": "integer"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "GeneretadSingle_select_colorCreateViewDecoration": {
      "properties": {
        "order": {
          "description": "The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first.",
          "maximum": 32767,
          "minimum": -32768,
          "type": "integer"
        },
        "type": {
          "allOf": [
            {
              "$ref": "#/definitions/TypeFc4Enum"
            }
          ],
          "description": "The decorator type. This is then interpreted by the frontend to display the decoration."
        },
        "value_provider_conf": {
          "allOf": [
            {
              "$ref": "#/definitions/SelectColorValueProviderConf"
            }
          ],
          "description": "The configuration of the value provider"
        },
        "value_provider_type": {
          "default": "",
          "description": "The value provider type that gives the value to the decorator."
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "GeneretadSingle_select_colorUpdateViewDecoration": {
      "properties": {
        "order": {
          "description": "The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first.",
          "maximum": 32767,
          "minimum": -32768,
          "type": "integer"
        },
        "type": {
          "allOf": [
            {
              "$ref": "#/definitions/TypeFc4Enum"
            }
          ],
          "description": "The decorator type. This is then interpreted by the frontend to display the decoration."
        },
        "value_provider_conf": {
          "allOf": [
            {
              "$ref": "#/definitions/SelectColorValueProviderConf"
            }
          ],
          "description": "The configuration of the value provider"
        },
        "value_provider_type": {
          "description": "The value provider type that gives the value to the decorator."
        }
      },
      "type": "object"
    },
    "GeneretadSingle_select_colorViewDecoration": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "order": {
          "description": "The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first.",
          "maximum": 32767,
          "minimum": -32768,
          "type": "integer"
        },
        "type": {
          "description": "The decorator type. This is then interpreted by the frontend to display the decoration.",
          "maxLength": 255,
          "type": "string"
        },
        "value_provider_conf": {
          "allOf": [
            {
              "$ref": "#/definitions/SelectColorValueProviderConf"
            }
          ],
          "description": "The configuration of the value provider"
        },
        "value_provider_type": {
          "description": "The value provider type that gives the value to the decorator.",
          "maxLength": 255,
          "type": "string"
        },
        "view": {
          "description": "The view to which the decoration applies. Each view can have his own decorations.",
          "type": "integer"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "GridViewCreateView": {
      "properties": {
        "filter_type": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterTypeEnum"
            }
          ],
          "description": "Indicates whether all the rows should apply to all filters (AND) or to any filter (OR)."
        },
        "filters_disabled": {
          "description": "Allows users to see results unfiltered while still keeping the filters saved for the view.",
          "type": "boolean"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "public": {
          "description": "Indicates whether the view is publicly accessible to visitors.",
          "type": "boolean"
        },
        "row_identifier_type": {
          "$ref": "#/definitions/RowIdentifierTypeEnum"
        },
        "slug": {
          "description": "The unique slug that can be used to construct a public URL.",
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/ViewTypesEnum"
        }
      },
      "required": [
        "name",
        "slug",
        "type"
      ],
      "type": "object"
    },
    "GridViewFieldOptions": {
      "properties": {
        "aggregation_raw_type": {
          "description": "Indicates how to compute the raw aggregation value from database. This type must be registered in the backend prior to use it."
        },
        "aggregation_type": {
          "description": "Indicates how the field value is aggregated. This value is different from the `aggregation_raw_type`. The `aggregation_raw_type` is the value extracted from the database, while the `aggregation_type` can implies further calculations. For example: if you want to compute an average, `sum` is going to be the `aggregation_raw_type`, the value extracted from database, and `sum / row_count` will be the aggregation result displayed to the user. This aggregation_type should be used by the client to compute the final value.",
          "maxLength": 48,
          "type": "string"
        },
        "hidden": {
          "description": "Whether or not the field should be hidden in the current view.",
          "type": "boolean"
        },
        "order": {
          "description": "The position that the field has within the view, lowest first. If there is another field with the same order value then the field with the lowest id must be shown first.",
          "maximum": 32767,
          "minimum": -32768,
          "type": "integer"
        },
        "width": {
          "description": "The width of the table field in the related view.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "GridViewFilter": {
      "properties": {
        "field_ids": {
          "description": "Only the fields related to the provided ids are added to the response. If None are provided all fields will be returned.",
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "row_ids": {
          "description": "Only rows related to the provided ids are added to the response.",
          "items": {
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "row_ids"
      ],
      "type": "object"
    },
    "GridViewView": {
      "properties": {
        "decorations": {
          "items": {
            "$ref": "#/definitions/ViewDecoration"
          },
          "type": "array"
        },
        "filter_type": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterTypeEnum"
            }
          ],
          "description": "Indicates whether all the rows should apply to all filters (AND) or to any filter (OR)."
        },
        "filters": {
          "items": {
            "$ref": "#/definitions/ViewFilter"
          },
          "type": "array"
        },
        "filters_disabled": {
          "description": "Allows users to see results unfiltered while still keeping the filters saved for the view.",
          "type": "boolean"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "public": {
          "description": "Indicates whether the view is publicly accessible to visitors.",
          "type": "boolean"
        },
        "public_view_has_password": {
          "readOnly": true,
          "type": "boolean"
        },
        "row_identifier_type": {
          "$ref": "#/definitions/RowIdentifierTypeEnum"
        },
        "slug": {
          "description": "The unique slug that can be used to construct a public URL.",
          "readOnly": true,
          "type": "string"
        },
        "sortings": {
          "items": {
            "$ref": "#/definitions/ViewSort"
          },
          "type": "array"
        },
        "table": {
          "$ref": "#/definitions/Table"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "public_view_has_password",
        "slug",
        "table",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "Group": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 160,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "type": "object"
    },
    "GroupAdminUsers": {
      "properties": {
        "email": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/PermissionsEnum"
            }
          ],
          "description": "The permissions that the user has within the group."
        }
      },
      "required": [
        "email",
        "id"
      ],
      "type": "object"
    },
    "GroupInvitation": {
      "properties": {
        "created_on": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "email": {
          "description": "The email address of the user that the invitation is meant for. Only a user with that email address can accept it.",
          "format": "email",
          "maxLength": 254,
          "type": "string"
        },
        "group": {
          "description": "The group that the user will get access to once the invitation is accepted.",
          "type": "integer"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "message": {
          "description": "An optional message that the invitor can provide. This will be visible to the receiver of the invitation.",
          "type": "string"
        },
        "permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/PermissionsEnum"
            }
          ],
          "description": "The permissions that the user is going to get within the group after accepting the invitation."
        }
      },
      "required": [
        "created_on",
        "email",
        "group",
        "id"
      ],
      "type": "object"
    },
    "GroupUser": {
      "properties": {
        "created_on": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "email": {
          "readOnly": true,
          "type": "string"
        },
        "group": {
          "description": "The group that the user has access to.",
          "type": "integer"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/PermissionsEnum"
            }
          ],
          "description": "The permissions that the user has within the group."
        }
      },
      "required": [
        "created_on",
        "email",
        "group",
        "id",
        "name"
      ],
      "type": "object"
    },
    "GroupUserGroup": {
      "description": "This serializers returns all the fields that the GroupSerializer has, but also\nsome user specific values related to the group user relation.",
      "properties": {
        "order": {
          "description": "Unique order that the group has for the user.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/PermissionsEnum"
            }
          ],
          "description": "The permissions that the user has within the group."
        }
      },
      "required": [
        "order"
      ],
      "type": "object"
    },
    "GroupsAdminResponse": {
      "properties": {
        "application_count": {
          "type": "integer"
        },
        "created_on": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 160,
          "type": "string"
        },
        "users": {
          "items": {
            "$ref": "#/definitions/GroupAdminUsers"
          },
          "type": "array"
        }
      },
      "required": [
        "application_count",
        "created_on",
        "id",
        "name",
        "users"
      ],
      "type": "object"
    },
    "ImpersonateAuthToken": {
      "description": "Serializer used for impersonation.",
      "properties": {
        "user": {
          "type": "integer"
        }
      },
      "required": [
        "user"
      ],
      "type": "object"
    },
    "InstanceId": {
      "properties": {
        "instance_id": {
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "instance_id"
      ],
      "type": "object"
    },
    "KanbanViewCreateView": {
      "properties": {
        "card_cover_image_field": {
          "description": "References a file field of which the first image must be shown as card cover image.",
          "type": "integer",
          "x-nullable": true
        },
        "filter_type": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterTypeEnum"
            }
          ],
          "description": "Indicates whether all the rows should apply to all filters (AND) or to any filter (OR)."
        },
        "filters_disabled": {
          "description": "Allows users to see results unfiltered while still keeping the filters saved for the view.",
          "type": "boolean"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "single_select_field": {
          "type": "integer",
          "x-nullable": true
        },
        "type": {
          "$ref": "#/definitions/ViewTypesEnum"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "KanbanViewExampleResponse": {
      "properties": {
        "OPTION_ID": {
          "allOf": [
            {
              "$ref": "#/definitions/KanbanViewExampleResponseStack"
            }
          ],
          "description": "Every select option related to the view's single select field can have its own entry like this."
        },
        "field_options": {
          "items": {
            "$ref": "#/definitions/KanbanViewFieldOptions"
          },
          "type": "array"
        }
      },
      "required": [
        "OPTION_ID",
        "field_options"
      ],
      "type": "object"
    },
    "KanbanViewExampleResponseStack": {
      "properties": {
        "count": {
          "description": "The total count of rows that are included in this group.",
          "type": "integer"
        },
        "results": {
          "description": "All the rows that belong in this group related with the provided `limit` and `offset`.",
          "items": {
            "$ref": "#/definitions/ExampleRowResponse"
          },
          "type": "array"
        }
      },
      "required": [
        "count",
        "results"
      ],
      "type": "object"
    },
    "KanbanViewFieldOptions": {
      "properties": {
        "hidden": {
          "description": "Whether or not the field should be hidden in the card.",
          "type": "boolean"
        },
        "order": {
          "description": "The order that the field has in the form. Lower value is first.",
          "maximum": 32767,
          "minimum": -32768,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "KanbanViewView": {
      "properties": {
        "card_cover_image_field": {
          "description": "References a file field of which the first image must be shown as card cover image.",
          "type": "integer",
          "x-nullable": true
        },
        "decorations": {
          "items": {
            "$ref": "#/definitions/ViewDecoration"
          },
          "type": "array"
        },
        "filter_type": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterTypeEnum"
            }
          ],
          "description": "Indicates whether all the rows should apply to all filters (AND) or to any filter (OR)."
        },
        "filters": {
          "items": {
            "$ref": "#/definitions/ViewFilter"
          },
          "type": "array"
        },
        "filters_disabled": {
          "description": "Allows users to see results unfiltered while still keeping the filters saved for the view.",
          "type": "boolean"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "public_view_has_password": {
          "readOnly": true,
          "type": "boolean"
        },
        "single_select_field": {
          "type": "integer",
          "x-nullable": true
        },
        "sortings": {
          "items": {
            "$ref": "#/definitions/ViewSort"
          },
          "type": "array"
        },
        "table": {
          "$ref": "#/definitions/Table"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "public_view_has_password",
        "table",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "LastModifiedFieldCreateField": {
      "properties": {
        "date_format": {
          "allOf": [
            {
              "$ref": "#/definitions/DateFormatEnum"
            }
          ],
          "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)"
        },
        "date_include_time": {
          "description": "Indicates if the field also includes a time.",
          "type": "boolean"
        },
        "date_time_format": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTimeFormatEnum"
            }
          ],
          "description": "24 (14:30) or 12 (02:30 PM)"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "timezone": {
          "$ref": "#/definitions/TimezoneEnum"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "required": [
        "name",
        "timezone",
        "type"
      ],
      "type": "object"
    },
    "LastModifiedFieldField": {
      "properties": {
        "date_format": {
          "allOf": [
            {
              "$ref": "#/definitions/DateFormatEnum"
            }
          ],
          "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)"
        },
        "date_include_time": {
          "description": "Indicates if the field also includes a time.",
          "type": "boolean"
        },
        "date_time_format": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTimeFormatEnum"
            }
          ],
          "description": "24 (14:30) or 12 (02:30 PM)"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "timezone": {
          "$ref": "#/definitions/TimezoneEnum"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "table_id",
        "timezone",
        "type"
      ],
      "type": "object"
    },
    "LastModifiedFieldFieldSerializerWithRelatedFields": {
      "properties": {
        "date_format": {
          "allOf": [
            {
              "$ref": "#/definitions/DateFormatEnum"
            }
          ],
          "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)"
        },
        "date_include_time": {
          "description": "Indicates if the field also includes a time.",
          "type": "boolean"
        },
        "date_time_format": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTimeFormatEnum"
            }
          ],
          "description": "24 (14:30) or 12 (02:30 PM)"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "related_fields": {
          "description": "A list of related fields which also changed.",
          "items": {
            "$ref": "#/definitions/Field"
          },
          "readOnly": true,
          "type": "array"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "timezone": {
          "$ref": "#/definitions/TimezoneEnum"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "related_fields",
        "table_id",
        "timezone",
        "type"
      ],
      "type": "object"
    },
    "LastModifiedFieldUpdateField": {
      "properties": {
        "date_format": {
          "allOf": [
            {
              "$ref": "#/definitions/DateFormatEnum"
            }
          ],
          "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)"
        },
        "date_include_time": {
          "description": "Indicates if the field also includes a time.",
          "type": "boolean"
        },
        "date_time_format": {
          "allOf": [
            {
              "$ref": "#/definitions/DateTimeFormatEnum"
            }
          ],
          "description": "24 (14:30) or 12 (02:30 PM)"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "timezone": {
          "$ref": "#/definitions/TimezoneEnum"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "required": [
        "timezone"
      ],
      "type": "object"
    },
    "LinkRowFieldCreateField": {
      "properties": {
        "link_row_related_field": {
          "readOnly": true,
          "type": "integer"
        },
        "link_row_table": {
          "description": "The table that the field has a relation with.",
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "required": [
        "link_row_related_field",
        "name",
        "type"
      ],
      "type": "object"
    },
    "LinkRowFieldField": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "link_row_related_field": {
          "readOnly": true,
          "type": "integer"
        },
        "link_row_table": {
          "description": "The table that the field has a relation with.",
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "link_row_related_field",
        "name",
        "order",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "LinkRowFieldFieldSerializerWithRelatedFields": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "link_row_related_field": {
          "readOnly": true,
          "type": "integer"
        },
        "link_row_table": {
          "description": "The table that the field has a relation with.",
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "related_fields": {
          "description": "A list of related fields which also changed.",
          "items": {
            "$ref": "#/definitions/Field"
          },
          "readOnly": true,
          "type": "array"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "link_row_related_field",
        "name",
        "order",
        "related_fields",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "LinkRowFieldUpdateField": {
      "properties": {
        "link_row_related_field": {
          "readOnly": true,
          "type": "integer"
        },
        "link_row_table": {
          "description": "The table that the field has a relation with.",
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "required": [
        "link_row_related_field"
      ],
      "type": "object"
    },
    "LinkRowValue": {
      "properties": {
        "id": {
          "description": "The unique identifier of the row in the related table.",
          "readOnly": true,
          "type": "integer"
        },
        "value": {
          "description": "The primary field's value as a string of the row in the related table.",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "LongTextFieldCreateField": {
      "properties": {
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "LongTextFieldField": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "LongTextFieldFieldSerializerWithRelatedFields": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "related_fields": {
          "description": "A list of related fields which also changed.",
          "items": {
            "$ref": "#/definitions/Field"
          },
          "readOnly": true,
          "type": "array"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "related_fields",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "LongTextFieldUpdateField": {
      "properties": {
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "type": "object"
    },
    "LookupFieldCreateField": {
      "properties": {
        "array_formula_type": {
          "x-nullable": true
        },
        "date_format": {
          "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)",
          "x-nullable": true
        },
        "date_include_time": {
          "description": "Indicates if the field also includes a time.",
          "type": "boolean",
          "x-nullable": true
        },
        "date_time_format": {
          "description": "24 (14:30) or 12 (02:30 PM)",
          "x-nullable": true
        },
        "error": {
          "type": "string",
          "x-nullable": true
        },
        "formula_type": {
          "$ref": "#/definitions/FormulaTypeEnum"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "number_decimal_places": {
          "description": "The amount of digits allowed after the point.",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        },
        "target_field_id": {
          "description": "The id of the field in the table linked to by the through_field to lookup. Will override the `target_field_id` parameter if both are provided, however only one is required.",
          "type": "integer",
          "x-nullable": true
        },
        "target_field_name": {
          "description": "The name of the field in the table linked to by the through_field to lookup.",
          "type": "string",
          "x-nullable": true
        },
        "through_field_id": {
          "description": "The id of the link row field to lookup values for. Will override the `through_field_name` parameter if both are provided, however only one is required.",
          "type": "integer",
          "x-nullable": true
        },
        "through_field_name": {
          "description": "The name of the link row field to lookup values for.",
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "LookupFieldField": {
      "properties": {
        "array_formula_type": {
          "x-nullable": true
        },
        "date_format": {
          "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)",
          "x-nullable": true
        },
        "date_include_time": {
          "description": "Indicates if the field also includes a time.",
          "type": "boolean",
          "x-nullable": true
        },
        "date_time_format": {
          "description": "24 (14:30) or 12 (02:30 PM)",
          "x-nullable": true
        },
        "error": {
          "type": "string",
          "x-nullable": true
        },
        "formula_type": {
          "$ref": "#/definitions/FormulaTypeEnum"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "number_decimal_places": {
          "description": "The amount of digits allowed after the point.",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "target_field_id": {
          "description": "The id of the field in the table linked to by the through_field to lookup. Will override the `target_field_id` parameter if both are provided, however only one is required.",
          "type": "integer",
          "x-nullable": true
        },
        "target_field_name": {
          "description": "The name of the field in the table linked to by the through_field to lookup.",
          "type": "string",
          "x-nullable": true
        },
        "through_field_id": {
          "description": "The id of the link row field to lookup values for. Will override the `through_field_name` parameter if both are provided, however only one is required.",
          "type": "integer",
          "x-nullable": true
        },
        "through_field_name": {
          "description": "The name of the link row field to lookup values for.",
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "LookupFieldFieldSerializerWithRelatedFields": {
      "properties": {
        "array_formula_type": {
          "x-nullable": true
        },
        "date_format": {
          "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)",
          "x-nullable": true
        },
        "date_include_time": {
          "description": "Indicates if the field also includes a time.",
          "type": "boolean",
          "x-nullable": true
        },
        "date_time_format": {
          "description": "24 (14:30) or 12 (02:30 PM)",
          "x-nullable": true
        },
        "error": {
          "type": "string",
          "x-nullable": true
        },
        "formula_type": {
          "$ref": "#/definitions/FormulaTypeEnum"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "number_decimal_places": {
          "description": "The amount of digits allowed after the point.",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "related_fields": {
          "description": "A list of related fields which also changed.",
          "items": {
            "$ref": "#/definitions/Field"
          },
          "readOnly": true,
          "type": "array"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "target_field_id": {
          "description": "The id of the field in the table linked to by the through_field to lookup. Will override the `target_field_id` parameter if both are provided, however only one is required.",
          "type": "integer",
          "x-nullable": true
        },
        "target_field_name": {
          "description": "The name of the field in the table linked to by the through_field to lookup.",
          "type": "string",
          "x-nullable": true
        },
        "through_field_id": {
          "description": "The id of the link row field to lookup values for. Will override the `through_field_name` parameter if both are provided, however only one is required.",
          "type": "integer",
          "x-nullable": true
        },
        "through_field_name": {
          "description": "The name of the link row field to lookup values for.",
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "related_fields",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "LookupFieldUpdateField": {
      "properties": {
        "array_formula_type": {
          "x-nullable": true
        },
        "date_format": {
          "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)",
          "x-nullable": true
        },
        "date_include_time": {
          "description": "Indicates if the field also includes a time.",
          "type": "boolean",
          "x-nullable": true
        },
        "date_time_format": {
          "description": "24 (14:30) or 12 (02:30 PM)",
          "x-nullable": true
        },
        "error": {
          "type": "string",
          "x-nullable": true
        },
        "formula_type": {
          "$ref": "#/definitions/FormulaTypeEnum"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "number_decimal_places": {
          "description": "The amount of digits allowed after the point.",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        },
        "target_field_id": {
          "description": "The id of the field in the table linked to by the through_field to lookup. Will override the `target_field_id` parameter if both are provided, however only one is required.",
          "type": "integer",
          "x-nullable": true
        },
        "target_field_name": {
          "description": "The name of the field in the table linked to by the through_field to lookup.",
          "type": "string",
          "x-nullable": true
        },
        "through_field_id": {
          "description": "The id of the link row field to lookup values for. Will override the `through_field_name` parameter if both are provided, however only one is required.",
          "type": "integer",
          "x-nullable": true
        },
        "through_field_name": {
          "description": "The name of the link row field to lookup values for.",
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "type": "object"
    },
    "MultipleSelectFieldCreateField": {
      "properties": {
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "select_options": {
          "items": {
            "$ref": "#/definitions/SelectOption"
          },
          "type": "array"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "MultipleSelectFieldField": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "select_options": {
          "items": {
            "$ref": "#/definitions/SelectOption"
          },
          "type": "array"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "MultipleSelectFieldFieldSerializerWithRelatedFields": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "related_fields": {
          "description": "A list of related fields which also changed.",
          "items": {
            "$ref": "#/definitions/Field"
          },
          "readOnly": true,
          "type": "array"
        },
        "select_options": {
          "items": {
            "$ref": "#/definitions/SelectOption"
          },
          "type": "array"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "related_fields",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "MultipleSelectFieldUpdateField": {
      "properties": {
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "select_options": {
          "items": {
            "$ref": "#/definitions/SelectOption"
          },
          "type": "array"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "type": "object"
    },
    "NormalizedEmailWebToken": {
      "description": "Serializer class used to validate a username and password.\n\n'username' is identified by the custom UserModel.USERNAME_FIELD.\n\nReturns a JSON Web Token that can be used to authenticate later calls.",
      "properties": {
        "password": {
          "type": "string"
        },
        "token": {
          "readOnly": true,
          "type": "string"
        },
        "username": {
          "format": "email",
          "type": "string"
        }
      },
      "required": [
        "password",
        "token",
        "username"
      ],
      "type": "object"
    },
    "NullEnum": {
      "enum": [
        null
      ]
    },
    "NumberDecimalPlacesEnum": {
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "type": "integer"
    },
    "NumberFieldCreateField": {
      "properties": {
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "number_decimal_places": {
          "allOf": [
            {
              "$ref": "#/definitions/NumberDecimalPlacesEnum"
            }
          ],
          "description": "The amount of digits allowed after the point.",
          "maximum": 2147483647,
          "minimum": -2147483648
        },
        "number_negative": {
          "description": "Indicates if negative values are allowed.",
          "type": "boolean"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "NumberFieldField": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "number_decimal_places": {
          "allOf": [
            {
              "$ref": "#/definitions/NumberDecimalPlacesEnum"
            }
          ],
          "description": "The amount of digits allowed after the point.",
          "maximum": 2147483647,
          "minimum": -2147483648
        },
        "number_negative": {
          "description": "Indicates if negative values are allowed.",
          "type": "boolean"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "NumberFieldFieldSerializerWithRelatedFields": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "number_decimal_places": {
          "allOf": [
            {
              "$ref": "#/definitions/NumberDecimalPlacesEnum"
            }
          ],
          "description": "The amount of digits allowed after the point.",
          "maximum": 2147483647,
          "minimum": -2147483648
        },
        "number_negative": {
          "description": "Indicates if negative values are allowed.",
          "type": "boolean"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "related_fields": {
          "description": "A list of related fields which also changed.",
          "items": {
            "$ref": "#/definitions/Field"
          },
          "readOnly": true,
          "type": "array"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "related_fields",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "NumberFieldUpdateField": {
      "properties": {
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "number_decimal_places": {
          "allOf": [
            {
              "$ref": "#/definitions/NumberDecimalPlacesEnum"
            }
          ],
          "description": "The amount of digits allowed after the point.",
          "maximum": 2147483647,
          "minimum": -2147483648
        },
        "number_negative": {
          "description": "Indicates if negative values are allowed.",
          "type": "boolean"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "type": "object"
    },
    "OperatorEnum": {
      "enum": [
        "AND",
        "OR"
      ],
      "type": "string"
    },
    "OrderApplications": {
      "properties": {
        "application_ids": {
          "description": "Application ids in the desired order.",
          "items": {
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "application_ids"
      ],
      "type": "object"
    },
    "OrderEnum": {
      "enum": [
        "ASC",
        "DESC"
      ],
      "type": "string"
    },
    "OrderGroups": {
      "properties": {
        "groups": {
          "description": "Group ids in the desired order.",
          "items": {
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "groups"
      ],
      "type": "object"
    },
    "OrderTables": {
      "properties": {
        "table_ids": {
          "description": "Table ids in the desired order.",
          "items": {
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "table_ids"
      ],
      "type": "object"
    },
    "OrderViews": {
      "properties": {
        "view_ids": {
          "description": "View ids in the desired order.",
          "items": {
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "view_ids"
      ],
      "type": "object"
    },
    "PaginationSerializerExampleRowResponseSerializerWithUserFieldNames": {
      "properties": {
        "count": {
          "description": "The total amount of results.",
          "type": "integer"
        },
        "next": {
          "description": "URL to the next page.",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "previous": {
          "description": "URL to the previous page.",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "results": {
          "items": {
            "$ref": "#/definitions/ExampleRowResponseSerializerWithUserFieldNames"
          },
          "type": "array"
        }
      },
      "required": [
        "count",
        "next",
        "previous",
        "results"
      ],
      "type": "object"
    },
    "PaginationSerializerLinkRowValue": {
      "properties": {
        "count": {
          "description": "The total amount of results.",
          "type": "integer"
        },
        "next": {
          "description": "URL to the next page.",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "previous": {
          "description": "URL to the previous page.",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "results": {
          "items": {
            "$ref": "#/definitions/LinkRowValue"
          },
          "type": "array"
        }
      },
      "required": [
        "count",
        "next",
        "previous",
        "results"
      ],
      "type": "object"
    },
    "PaginationSerializerPremiumLicenseUserLookup": {
      "properties": {
        "count": {
          "description": "The total amount of results.",
          "type": "integer"
        },
        "next": {
          "description": "URL to the next page.",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "previous": {
          "description": "URL to the previous page.",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "results": {
          "items": {
            "$ref": "#/definitions/PremiumLicenseUserLookup"
          },
          "type": "array"
        }
      },
      "required": [
        "count",
        "next",
        "previous",
        "results"
      ],
      "type": "object"
    },
    "PaginationSerializerRowComment": {
      "properties": {
        "count": {
          "description": "The total amount of results.",
          "type": "integer"
        },
        "next": {
          "description": "URL to the next page.",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "previous": {
          "description": "URL to the previous page.",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "results": {
          "items": {
            "$ref": "#/definitions/RowComment"
          },
          "type": "array"
        }
      },
      "required": [
        "count",
        "next",
        "previous",
        "results"
      ],
      "type": "object"
    },
    "PaginationSerializerTrashContents": {
      "properties": {
        "count": {
          "description": "The total amount of results.",
          "type": "integer"
        },
        "next": {
          "description": "URL to the next page.",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "previous": {
          "description": "URL to the previous page.",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "results": {
          "items": {
            "$ref": "#/definitions/TrashContents"
          },
          "type": "array"
        }
      },
      "required": [
        "count",
        "next",
        "previous",
        "results"
      ],
      "type": "object"
    },
    "PaginationSerializerWithGalleryViewFieldOptionsExampleRowResponse": {
      "properties": {
        "count": {
          "description": "The total amount of results.",
          "type": "integer"
        },
        "field_options": {
          "additionalProperties": {
            "$ref": "#/definitions/GalleryViewFieldOptions"
          },
          "description": "An object containing the field id as key and the properties related to view as value.",
          "type": "object"
        },
        "next": {
          "description": "URL to the next page.",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "previous": {
          "description": "URL to the previous page.",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "results": {
          "items": {
            "$ref": "#/definitions/ExampleRowResponse"
          },
          "type": "array"
        }
      },
      "required": [
        "count",
        "next",
        "previous",
        "results"
      ],
      "type": "object"
    },
    "PaginationSerializerWithGridViewFieldOptionsExampleRowResponse": {
      "properties": {
        "count": {
          "description": "The total amount of results.",
          "type": "integer"
        },
        "field_options": {
          "additionalProperties": {
            "$ref": "#/definitions/GridViewFieldOptions"
          },
          "description": "An object containing the field id as key and the properties related to view as value.",
          "type": "object"
        },
        "next": {
          "description": "URL to the next page.",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "previous": {
          "description": "URL to the previous page.",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "results": {
          "items": {
            "$ref": "#/definitions/ExampleRowResponse"
          },
          "type": "array"
        },
        "row_metadata": {
          "additionalProperties": {
            "$ref": "#/definitions/RowMetadata"
          },
          "description": "An object keyed by row id with a value being an object containing additional metadata about that row. A row might not have metadata and will not be present as a key if so.",
          "type": "object"
        }
      },
      "required": [
        "count",
        "next",
        "previous",
        "results"
      ],
      "type": "object"
    },
    "PatchedAccount": {
      "description": "This serializer must be kept in sync with `UserSerializer`.",
      "properties": {
        "first_name": {
          "maxLength": 150,
          "minLength": 2,
          "type": "string"
        },
        "language": {
          "description": "An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.",
          "maxLength": 10,
          "minLength": 2,
          "type": "string"
        }
      },
      "type": "object"
    },
    "PatchedApplicationUpdate": {
      "properties": {
        "name": {
          "maxLength": 160,
          "type": "string"
        }
      },
      "type": "object"
    },
    "PatchedDecorator_Value_Provider_TypeUpdateViewDecoration": {},
    "PatchedExampleBatchUpdateRowsRequest": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/ExampleBatchUpdateRowRequestSerializerWithUserFieldNames"
          },
          "maxItems": 200,
          "minItems": 1,
          "type": "array"
        }
      },
      "type": "object"
    },
    "PatchedExampleUpdateRowRequestSerializerWithUserFieldNames": {
      "properties": {
        "field_1": {
          "description": "This field represents the `text` field. The number in field_1 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "type": "string",
          "x-nullable": true
        },
        "field_11": {
          "description": "This field represents the `link_row` field. The number in field_11 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `array` containing the ids of the related rows.The response contains a list of objects containing the `id` and the primary field's `value` as a string for display purposes.",
          "items": {
            "minimum": 0,
            "type": "integer"
          },
          "type": "array"
        },
        "field_12": {
          "description": "This field represents the `file` field. The number in field_12 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `array` containing objects with the name of the file. The response contains an `array` of more detailed objects related to the files.",
          "items": {
            "$ref": "#/definitions/FileFieldRequest"
          },
          "type": "array",
          "x-nullable": true
        },
        "field_13": {
          "description": "This field represents the `single_select` field. The number in field_13 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts an `integer` representing the chosen select option id related to the field. Available ids can be found when getting or listing the field. The response represents chosen field, but also the value and color is exposed.",
          "type": "integer",
          "x-nullable": true
        },
        "field_14": {
          "items": {
            "description": "This field represents the `multiple_select` field. The number in field_14 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.This field accepts a list of `integer` each of which representing the chosen select option id related to the field. Available ids can be foundwhen getting or listing the field. The response represents chosen field, but also the value and color is exposed.",
            "type": "integer",
            "x-nullable": true
          },
          "type": "array"
        },
        "field_15": {
          "description": "This field represents the `phone_number` field. The number in field_15 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "maxLength": 100,
          "type": "string",
          "x-nullable": true
        },
        "field_2": {
          "description": "This field represents the `long_text` field. The number in field_2 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "type": "string",
          "x-nullable": true
        },
        "field_3": {
          "description": "This field represents the `url` field. The number in field_3 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "type": "string",
          "x-nullable": true
        },
        "field_4": {
          "description": "This field represents the `email` field. The number in field_4 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "maxLength": 254,
          "type": "string",
          "x-nullable": true
        },
        "field_5": {
          "description": "This field represents the `number` field. The number in field_5 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "format": "decimal",
          "pattern": "^\\d{0,50}(?:\\.\\d{0,0})?$",
          "type": "string",
          "x-nullable": true
        },
        "field_6": {
          "default": 0,
          "description": "This field represents the `rating` field. The number in field_6 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "maximum": 5,
          "minimum": 0,
          "type": "integer"
        },
        "field_7": {
          "default": false,
          "description": "This field represents the `boolean` field. The number in field_7 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "type": "boolean"
        },
        "field_8": {
          "description": "This field represents the `date` field. The number in field_8 is in a normal request or response the id of the field. If the GET parameter `user_field_names` is provided then the key will instead be the actual name of the field.",
          "format": "date",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "PatchedFieldUpdateField": {},
    "PatchedGroup": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 160,
          "type": "string"
        }
      },
      "type": "object"
    },
    "PatchedSettings": {
      "properties": {
        "allow_new_signups": {
          "description": "Indicates whether new users can create a new account when signing up.",
          "type": "boolean"
        },
        "allow_reset_password": {
          "description": "Indicates whether users can request a password reset link.",
          "type": "boolean"
        },
        "allow_signups_via_group_invitations": {
          "description": "Indicates whether invited users can create an account when signing up, even if allow_new_signups is disabled.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PatchedTableUpdate": {
      "properties": {
        "name": {
          "maxLength": 255,
          "type": "string"
        }
      },
      "type": "object"
    },
    "PatchedTableWebhookUpdateRequest": {
      "properties": {
        "active": {
          "description": "Indicates whether the web hook is active. When a webhook has failed multiple times, it will automatically be deactivated.",
          "type": "boolean"
        },
        "events": {
          "description": "A list containing the events that will trigger this webhook.",
          "items": {
            "$ref": "#/definitions/EventTypesEnum"
          },
          "type": "array"
        },
        "headers": {
          "additionalProperties": {},
          "description": "The additional headers as an object where the key is the name and the value the value.",
          "type": "object"
        },
        "include_all_events": {
          "description": "Indicates whether this webhook should listen to all events.",
          "type": "boolean"
        },
        "name": {
          "description": "An internal name of the webhook.",
          "maxLength": 255,
          "type": "string"
        },
        "request_method": {
          "allOf": [
            {
              "$ref": "#/definitions/RequestMethodEnum"
            }
          ],
          "description": "The request method that be used when the event occurs."
        },
        "url": {
          "description": "The URL that must be called when the webhook is triggered.",
          "format": "uri",
          "maxLength": 2000,
          "type": "string"
        },
        "use_user_field_names": {
          "description": "Indicates whether the field names must be used as payload key instead of the id.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PatchedTokenUpdate": {
      "properties": {
        "name": {
          "description": "The human readable name of the token for the user.",
          "maxLength": 100,
          "type": "string"
        },
        "permissions": {
          "description": "Indicates per operation which permissions the API token has within the whole group. If the value of for example `create` is `true`, then the token can create rows in all tables related to the group. If a list is provided with for example `[[\"table\", 1]]` then the token only has create permissions for the table with id 1. Same goes for if a database references is provided. `[[\"database\", 1]]` means create permissions for all tables in the database with id 1.\n\nExample:\n```json\n{\n  \"create\": true// Allows creating rows in all tables.\n  // Allows reading rows from database 1 and table 10.\n  \"read\": [[\"database\", 1], [\"table\", 10]],\n  \"update\": false  // Denies updating rows in all tables.\n  \"delete\": []  // Denies deleting rows in all tables.\n }\n```",
          "properties": {
            "create": {},
            "delete": {},
            "read": {},
            "update": {}
          },
          "type": "object"
        },
        "rotate_key": {
          "default": false,
          "description": "Indicates if a new key must be generated.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PatchedTrashEntryRequest": {
      "description": "Mixin to a DRF serializer class to raise an exception if data with unknown fields\nis provided to the serializer.",
      "properties": {
        "parent_trash_item_id": {
          "minimum": 0,
          "type": "integer",
          "x-nullable": true
        },
        "trash_item_id": {
          "minimum": 0,
          "type": "integer"
        },
        "trash_item_type": {
          "$ref": "#/definitions/TrashItemTypeEnum"
        }
      },
      "type": "object"
    },
    "PatchedUndoRedoRequest": {
      "properties": {
        "scopes": {
          "allOf": [
            {
              "$ref": "#/definitions/ActionScopesRequest"
            }
          ],
          "description": "A JSON object with keys and values representing the various action scopes to include when undoing or redoing. Every action in Baserow will be associated with a action scope, when undoing/redoing only actions which match any of the provided scope key:value pairs will included when this endpoint picks the next action to undo/redo."
        }
      },
      "type": "object"
    },
    "PatchedUpdateGroupInvitation": {
      "properties": {
        "permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/PermissionsEnum"
            }
          ],
          "description": "The permissions that the user is going to get within the group after accepting the invitation."
        }
      },
      "type": "object"
    },
    "PatchedUpdateGroupUser": {
      "properties": {
        "permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/PermissionsEnum"
            }
          ],
          "description": "The permissions that the user has within the group."
        }
      },
      "type": "object"
    },
    "PatchedUpdateViewFilter": {
      "properties": {
        "field": {
          "description": "The field of which the value must be compared to the filter value.",
          "type": "integer"
        },
        "type": {
          "allOf": [
            {
              "$ref": "#/definitions/ViewFilterTypesEnum"
            }
          ],
          "description": "Indicates how the field's value must be compared to the filter's value. The filter is always in this order `field` `type` `value` (example: `field_1` `contains` `Test`)."
        },
        "value": {
          "description": "The filter value that must be compared to the field's value.",
          "maxLength": 255,
          "type": "string"
        }
      },
      "type": "object"
    },
    "PatchedUpdateViewSort": {
      "properties": {
        "field": {
          "description": "The field that must be sorted on.",
          "type": "integer"
        },
        "order": {
          "allOf": [
            {
              "$ref": "#/definitions/OrderEnum"
            }
          ],
          "description": "Indicates the sort order direction. ASC (Ascending) is from A to Z and DESC (Descending) is from Z to A."
        }
      },
      "type": "object"
    },
    "PatchedUserAdminUpdate": {
      "description": "Serializes a request body for updating a given user. Do not use for returning user\ndata as the password will be returned also.",
      "properties": {
        "is_active": {
          "description": "Designates whether this user should be treated as active. Set this to false instead of deleting accounts.",
          "title": "Active",
          "type": "boolean"
        },
        "is_staff": {
          "description": "Designates whether this user is an admin and has access to all groups and Baserow's admin areas. ",
          "title": "Staff status",
          "type": "boolean"
        },
        "name": {
          "maxLength": 150,
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "format": "email",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PatchedViewFieldOptions": {},
    "PatchedViewUpdateView": {},
    "PermissionsEnum": {
      "enum": [
        "ADMIN",
        "MEMBER"
      ],
      "type": "string"
    },
    "PhoneNumberFieldCreateField": {
      "properties": {
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "PhoneNumberFieldField": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "PhoneNumberFieldFieldSerializerWithRelatedFields": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "related_fields": {
          "description": "A list of related fields which also changed.",
          "items": {
            "$ref": "#/definitions/Field"
          },
          "readOnly": true,
          "type": "array"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "related_fields",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "PhoneNumberFieldUpdateField": {
      "properties": {
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "type": "object"
    },
    "PremiumLicense": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "is_active": {
          "description": "Indicates if the backend deems the license valid.",
          "type": "boolean"
        },
        "issued_on": {
          "description": "The date when the license was issued. It could be that a new license is issued with the same `license_id` because it was updated. In that case, the one that has been issued last should be used.",
          "format": "date-time",
          "type": "string"
        },
        "issued_to_email": {
          "description": "Indicates to which email address the license has been issued.",
          "format": "email",
          "type": "string"
        },
        "issued_to_name": {
          "description": "Indicates to whom the license has been issued.",
          "type": "string"
        },
        "last_check": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "license_id": {
          "description": "Unique identifier of the license.",
          "type": "string"
        },
        "product_code": {
          "description": "The product code that indicates what the license unlocks.",
          "type": "string"
        },
        "seats": {
          "description": "The maximum amount of users that can use the license.",
          "type": "integer"
        },
        "seats_taken": {
          "description": "The amount of users that are currently using the license.",
          "readOnly": true,
          "type": "integer"
        },
        "valid_from": {
          "description": "From which timestamp the license becomes active.",
          "format": "date-time",
          "type": "string"
        },
        "valid_through": {
          "description": "Until which timestamp the license is active.",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "id",
        "is_active",
        "issued_on",
        "issued_to_email",
        "issued_to_name",
        "license_id",
        "product_code",
        "seats",
        "seats_taken",
        "valid_from",
        "valid_through"
      ],
      "type": "object"
    },
    "PremiumLicenseUser": {
      "properties": {
        "email": {
          "format": "email",
          "maxLength": 254,
          "title": "Email address",
          "type": "string"
        },
        "first_name": {
          "maxLength": 150,
          "type": "string"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "PremiumLicenseUserLookup": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "value": {
          "description": "The name and the email address of the user.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "value"
      ],
      "type": "object"
    },
    "PremiumLicenseWithUsers": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "is_active": {
          "description": "Indicates if the backend deems the license valid.",
          "type": "boolean"
        },
        "issued_on": {
          "description": "The date when the license was issued. It could be that a new license is issued with the same `license_id` because it was updated. In that case, the one that has been issued last should be used.",
          "format": "date-time",
          "type": "string"
        },
        "issued_to_email": {
          "description": "Indicates to which email address the license has been issued.",
          "format": "email",
          "type": "string"
        },
        "issued_to_name": {
          "description": "Indicates to whom the license has been issued.",
          "type": "string"
        },
        "last_check": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "license_id": {
          "description": "Unique identifier of the license.",
          "type": "string"
        },
        "product_code": {
          "description": "The product code that indicates what the license unlocks.",
          "type": "string"
        },
        "seats": {
          "description": "The maximum amount of users that can use the license.",
          "type": "integer"
        },
        "seats_taken": {
          "description": "The amount of users that are currently using the license.",
          "readOnly": true,
          "type": "integer"
        },
        "users": {
          "items": {
            "$ref": "#/definitions/PremiumLicenseUser"
          },
          "readOnly": true,
          "type": "array"
        },
        "valid_from": {
          "description": "From which timestamp the license becomes active.",
          "format": "date-time",
          "type": "string"
        },
        "valid_through": {
          "description": "Until which timestamp the license is active.",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "id",
        "is_active",
        "issued_on",
        "issued_to_email",
        "issued_to_name",
        "license_id",
        "product_code",
        "seats",
        "seats_taken",
        "users",
        "valid_from",
        "valid_through"
      ],
      "type": "object"
    },
    "PublicField": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "PublicFormView": {
      "properties": {
        "cover_image": {
          "allOf": [
            {
              "$ref": "#/definitions/UserFile"
            }
          ],
          "description": "The user file cover image that is displayed at the top of the form.",
          "x-nullable": true
        },
        "description": {
          "description": "The description that is displayed at the beginning of the form.",
          "type": "string"
        },
        "fields": {
          "items": {
            "$ref": "#/definitions/PublicFormViewFieldOptions"
          },
          "type": "array"
        },
        "logo_image": {
          "allOf": [
            {
              "$ref": "#/definitions/UserFile"
            }
          ],
          "description": "The user file logo image that is displayed at the top of the form.",
          "x-nullable": true
        },
        "submit_text": {
          "description": "The text displayed on the submit button.",
          "type": "string"
        },
        "title": {
          "description": "The title that is displayed at the beginning of the form.",
          "type": "string"
        }
      },
      "required": [
        "fields"
      ],
      "type": "object"
    },
    "PublicFormViewField": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "type"
      ],
      "type": "object"
    },
    "PublicFormViewFieldOptions": {
      "properties": {
        "description": {
          "description": "If provided, then this value be will be shown under the field name.",
          "type": "string"
        },
        "field": {
          "allOf": [
            {
              "$ref": "#/definitions/PublicFormViewField"
            }
          ],
          "description": "The properties of the related field. These can be used to construct the correct input. Additional properties could be added depending on the field type.",
          "readOnly": true
        },
        "name": {
          "description": "If provided, then this value will be visible above the field input.",
          "readOnly": true,
          "type": "string"
        },
        "order": {
          "description": "The order that the field has in the form. Lower value is first.",
          "maximum": 32767,
          "minimum": -32768,
          "type": "integer"
        },
        "required": {
          "description": "Indicates whether the field is required for the visitor to fill out.",
          "type": "boolean"
        }
      },
      "required": [
        "field",
        "name"
      ],
      "type": "object"
    },
    "PublicGridView": {
      "properties": {
        "id": {
          "pattern": "^[-a-zA-Z0-9_]+$",
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "public": {
          "description": "Indicates whether the view is publicly accessible to visitors.",
          "type": "boolean"
        },
        "slug": {
          "description": "The unique slug where the view can be accessed publicly on.",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "type": "string"
        },
        "sortings": {
          "items": {
            "$ref": "#/definitions/PublicViewSort"
          },
          "readOnly": true,
          "type": "array"
        },
        "table": {
          "$ref": "#/definitions/PublicGridViewTable"
        },
        "type": {
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "slug",
        "sortings",
        "table",
        "type"
      ],
      "type": "object"
    },
    "PublicGridViewInfo": {
      "properties": {
        "fields": {
          "items": {
            "$ref": "#/definitions/PublicField"
          },
          "readOnly": true,
          "type": "array"
        },
        "view": {
          "allOf": [
            {
              "$ref": "#/definitions/PublicGridView"
            }
          ],
          "readOnly": true
        }
      },
      "required": [
        "fields",
        "view"
      ],
      "type": "object"
    },
    "PublicGridViewTable": {
      "properties": {
        "database_id": {
          "readOnly": true,
          "type": "integer"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        }
      },
      "required": [
        "database_id",
        "id"
      ],
      "type": "object"
    },
    "PublicPaginationSerializerWithGridViewFieldOptionsExampleRowResponse": {
      "properties": {
        "count": {
          "description": "The total amount of results.",
          "type": "integer"
        },
        "field_options": {
          "additionalProperties": {
            "$ref": "#/definitions/GridViewFieldOptions"
          },
          "description": "An object containing the field id as key and the properties related to view as value.",
          "type": "object"
        },
        "next": {
          "description": "URL to the next page.",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "previous": {
          "description": "URL to the previous page.",
          "format": "uri",
          "type": "string",
          "x-nullable": true
        },
        "results": {
          "items": {
            "$ref": "#/definitions/ExampleRowResponse"
          },
          "type": "array"
        }
      },
      "required": [
        "count",
        "next",
        "previous",
        "results"
      ],
      "type": "object"
    },
    "PublicViewAuthRequest": {
      "properties": {
        "password": {
          "type": "string"
        }
      },
      "required": [
        "password"
      ],
      "type": "object"
    },
    "PublicViewAuthResponse": {
      "properties": {
        "access_token": {
          "type": "string"
        }
      },
      "required": [
        "access_token"
      ],
      "type": "object"
    },
    "PublicViewSort": {
      "properties": {
        "field": {
          "description": "The field that must be sorted on.",
          "type": "integer"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "order": {
          "allOf": [
            {
              "$ref": "#/definitions/OrderEnum"
            }
          ],
          "description": "Indicates the sort order direction. ASC (Ascending) is from A to Z and DESC (Descending) is from Z to A."
        },
        "view": {
          "pattern": "^[-a-zA-Z0-9_]+$",
          "type": "string"
        }
      },
      "required": [
        "field",
        "id",
        "view"
      ],
      "type": "object"
    },
    "RatingFieldCreateField": {
      "properties": {
        "color": {
          "description": "Color of the symbols.",
          "maxLength": 50,
          "type": "string"
        },
        "max_value": {
          "description": "Maximum value the rating can take.",
          "maximum": 10,
          "minimum": 1,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "style": {
          "allOf": [
            {
              "$ref": "#/definitions/StyleEnum"
            }
          ],
          "description": "Rating style. Allowed values: star, heart, thumbs-up, flag, smile."
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "RatingFieldField": {
      "properties": {
        "color": {
          "description": "Color of the symbols.",
          "maxLength": 50,
          "type": "string"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "max_value": {
          "description": "Maximum value the rating can take.",
          "maximum": 10,
          "minimum": 1,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "style": {
          "allOf": [
            {
              "$ref": "#/definitions/StyleEnum"
            }
          ],
          "description": "Rating style. Allowed values: star, heart, thumbs-up, flag, smile."
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "RatingFieldFieldSerializerWithRelatedFields": {
      "properties": {
        "color": {
          "description": "Color of the symbols.",
          "maxLength": 50,
          "type": "string"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "max_value": {
          "description": "Maximum value the rating can take.",
          "maximum": 10,
          "minimum": 1,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "related_fields": {
          "description": "A list of related fields which also changed.",
          "items": {
            "$ref": "#/definitions/Field"
          },
          "readOnly": true,
          "type": "array"
        },
        "style": {
          "allOf": [
            {
              "$ref": "#/definitions/StyleEnum"
            }
          ],
          "description": "Rating style. Allowed values: star, heart, thumbs-up, flag, smile."
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "related_fields",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "RatingFieldUpdateField": {
      "properties": {
        "color": {
          "description": "Color of the symbols.",
          "maxLength": 50,
          "type": "string"
        },
        "max_value": {
          "description": "Maximum value the rating can take.",
          "maximum": 10,
          "minimum": 1,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "style": {
          "allOf": [
            {
              "$ref": "#/definitions/StyleEnum"
            }
          ],
          "description": "Rating style. Allowed values: star, heart, thumbs-up, flag, smile."
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "type": "object"
    },
    "RefreshAuthToken": {
      "description": "Serializer used for refreshing JWTs.",
      "properties": {
        "token": {
          "type": "string"
        }
      },
      "required": [
        "token"
      ],
      "type": "object"
    },
    "Register": {
      "properties": {
        "authenticate": {
          "default": false,
          "description": "Indicates whether an authentication token should be generated and be included in the response.",
          "type": "boolean"
        },
        "email": {
          "description": "The email address is also going to be the username.",
          "format": "email",
          "type": "string"
        },
        "group_invitation_token": {
          "description": "If provided and valid, the user accepts the group invitation and will have access to the group after signing up.",
          "type": "string"
        },
        "language": {
          "default": "en",
          "description": "An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.",
          "maxLength": 10,
          "minLength": 2,
          "type": "string"
        },
        "name": {
          "maxLength": 150,
          "minLength": 2,
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "template_id": {
          "description": "The id of the template that must be installed after creating the account. This only works if the `group_invitation_token` param is not provided.",
          "type": "integer"
        }
      },
      "required": [
        "email",
        "name",
        "password"
      ],
      "type": "object"
    },
    "RegisterPremiumLicense": {
      "properties": {
        "license": {
          "description": "The license that you want to register.",
          "type": "string"
        }
      },
      "required": [
        "license"
      ],
      "type": "object"
    },
    "RelatedFields": {
      "properties": {
        "related_fields": {
          "description": "A list of related fields which also changed.",
          "items": {
            "$ref": "#/definitions/Field"
          },
          "readOnly": true,
          "type": "array"
        }
      },
      "required": [
        "related_fields"
      ],
      "type": "object"
    },
    "RequestMethodEnum": {
      "enum": [
        "POST",
        "GET",
        "PUT",
        "PATCH",
        "DELETE"
      ],
      "type": "string"
    },
    "ResetPasswordBodyValidation": {
      "properties": {
        "password": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      },
      "required": [
        "password",
        "token"
      ],
      "type": "object"
    },
    "RowComment": {
      "properties": {
        "comment": {
          "description": "The users comment.",
          "type": "string"
        },
        "created_on": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "first_name": {
          "maxLength": 32,
          "type": "string"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "row_id": {
          "description": "The id of the row the comment is for.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "table_id": {
          "description": "The table the row this comment is for is found in. ",
          "readOnly": true,
          "type": "integer"
        },
        "updated_on": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "user_id": {
          "description": "The user who made the comment.",
          "readOnly": true,
          "type": "integer"
        }
      },
      "required": [
        "comment",
        "created_on",
        "first_name",
        "id",
        "row_id",
        "table_id",
        "updated_on",
        "user_id"
      ],
      "type": "object"
    },
    "RowCommentCreate": {
      "properties": {
        "comment": {
          "maxLength": 10000,
          "type": "string"
        }
      },
      "required": [
        "comment"
      ],
      "type": "object"
    },
    "RowIdentifierTypeEnum": {
      "enum": [
        "id",
        "count"
      ],
      "type": "string"
    },
    "RowMetadata": {
      "properties": {
        "row_comment_count": {
          "description": "How many row comments exist for this row.",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SelectColorValueProviderConf": {
      "properties": {
        "field_id": {
          "description": "An id of a select field of the table. The value provider return the color of the selected option for each row.",
          "type": "integer",
          "x-nullable": true
        }
      },
      "required": [
        "field_id"
      ],
      "type": "object"
    },
    "SelectOption": {
      "properties": {
        "color": {
          "maxLength": 255,
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "value": {
          "maxLength": 255,
          "type": "string"
        }
      },
      "required": [
        "color",
        "value"
      ],
      "type": "object"
    },
    "SendResetPasswordEmailBodyValidation": {
      "properties": {
        "base_url": {
          "description": "The base URL where the user can reset his password. The reset token is going to be appended to the base_url (base_url '/token').",
          "format": "uri",
          "type": "string"
        },
        "email": {
          "description": "The email address of the user that has requested a password reset.",
          "format": "email",
          "type": "string"
        }
      },
      "required": [
        "base_url",
        "email"
      ],
      "type": "object"
    },
    "Settings": {
      "properties": {
        "allow_new_signups": {
          "description": "Indicates whether new users can create a new account when signing up.",
          "type": "boolean"
        },
        "allow_reset_password": {
          "description": "Indicates whether users can request a password reset link.",
          "type": "boolean"
        },
        "allow_signups_via_group_invitations": {
          "description": "Indicates whether invited users can create an account when signing up, even if allow_new_signups is disabled.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SingleSelectFieldCreateField": {
      "properties": {
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "select_options": {
          "items": {
            "$ref": "#/definitions/SelectOption"
          },
          "type": "array"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "SingleSelectFieldField": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "select_options": {
          "items": {
            "$ref": "#/definitions/SelectOption"
          },
          "type": "array"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "SingleSelectFieldFieldSerializerWithRelatedFields": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "related_fields": {
          "description": "A list of related fields which also changed.",
          "items": {
            "$ref": "#/definitions/Field"
          },
          "readOnly": true,
          "type": "array"
        },
        "select_options": {
          "items": {
            "$ref": "#/definitions/SelectOption"
          },
          "type": "array"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "related_fields",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "SingleSelectFieldUpdateField": {
      "properties": {
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "select_options": {
          "items": {
            "$ref": "#/definitions/SelectOption"
          },
          "type": "array"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "type": "object"
    },
    "StatusEnum": {
      "enum": [
        "pending",
        "exporting",
        "cancelled",
        "complete",
        "failed",
        "expired"
      ],
      "type": "string"
    },
    "StyleEnum": {
      "enum": [
        "star",
        "heart",
        "thumbs-up",
        "flag",
        "smile"
      ],
      "type": "string"
    },
    "SubmitActionEnum": {
      "enum": [
        "MESSAGE",
        "REDIRECT"
      ],
      "type": "string"
    },
    "Table": {
      "properties": {
        "database_id": {
          "readOnly": true,
          "type": "integer"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "database_id",
        "id",
        "name",
        "order"
      ],
      "type": "object"
    },
    "TableCreate": {
      "properties": {
        "data": {
          "description": "A list of rows that needs to be created as initial table data. If not provided some example data is going to be created.",
          "items": {
            "description": "The row containing all the values.",
            "items": {
              "description": "The value of the cell.",
              "type": "string"
            },
            "type": "array"
          },
          "minItems": 1,
          "type": "array"
        },
        "first_row_header": {
          "default": false,
          "description": "Indicates if the first provided row is the header. If true the field names are going to be the values of the first row. Otherwise they will be called \"Column N\"",
          "type": "boolean"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "TableWebhook": {
      "properties": {
        "active": {
          "description": "Indicates whether the web hook is active. When a webhook has failed multiple times, it will automatically be deactivated.",
          "type": "boolean"
        },
        "calls": {
          "description": "All the calls that this webhook made.",
          "items": {
            "$ref": "#/definitions/TableWebhookCall"
          },
          "type": "array"
        },
        "created_on": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "events": {
          "additionalProperties": {},
          "description": "A list containing the events that will trigger this webhook.",
          "readOnly": true,
          "type": "object"
        },
        "failed_triggers": {
          "description": "The amount of failed webhook calls.",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "type": "integer"
        },
        "headers": {
          "additionalProperties": {},
          "description": "The additional headers as an object where the key is the name and the value the value.",
          "readOnly": true,
          "type": "object"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "include_all_events": {
          "description": "Indicates whether this webhook should listen to all events.",
          "type": "boolean"
        },
        "name": {
          "description": "An internal name of the webhook.",
          "maxLength": 255,
          "type": "string"
        },
        "request_method": {
          "allOf": [
            {
              "$ref": "#/definitions/RequestMethodEnum"
            }
          ],
          "description": "The request method that be used when the event occurs."
        },
        "updated_on": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "description": "The URL that must be called when the webhook is triggered.",
          "format": "uri",
          "maxLength": 2000,
          "type": "string"
        },
        "use_user_field_names": {
          "description": "Indicates whether the field names must be used as payload key instead of the id.",
          "type": "boolean"
        }
      },
      "required": [
        "calls",
        "created_on",
        "events",
        "headers",
        "id",
        "name",
        "updated_on",
        "url"
      ],
      "type": "object"
    },
    "TableWebhookCall": {
      "properties": {
        "called_time": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "called_url": {
          "format": "uri",
          "maxLength": 2000,
          "type": "string"
        },
        "error": {
          "description": "An internal error reflecting what went wrong.",
          "type": "string",
          "x-nullable": true
        },
        "event_type": {
          "maxLength": 50,
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "readOnly": true,
          "type": "string"
        },
        "request": {
          "description": "A text copy of the request headers and body.",
          "type": "string",
          "x-nullable": true
        },
        "response": {
          "description": "A text copy of the response headers and body.",
          "type": "string",
          "x-nullable": true
        },
        "response_status": {
          "description": "The HTTP response status code.",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "type": "integer",
          "x-nullable": true
        }
      },
      "required": [
        "called_url",
        "event_type",
        "id"
      ],
      "type": "object"
    },
    "TableWebhookCreateRequest": {
      "properties": {
        "events": {
          "description": "A list containing the events that will trigger this webhook.",
          "items": {
            "$ref": "#/definitions/EventTypesEnum"
          },
          "type": "array"
        },
        "headers": {
          "additionalProperties": {},
          "description": "The additional headers as an object where the key is the name and the value the value.",
          "type": "object"
        },
        "include_all_events": {
          "description": "Indicates whether this webhook should listen to all events.",
          "type": "boolean"
        },
        "name": {
          "description": "An internal name of the webhook.",
          "maxLength": 255,
          "type": "string"
        },
        "request_method": {
          "allOf": [
            {
              "$ref": "#/definitions/RequestMethodEnum"
            }
          ],
          "description": "The request method that be used when the event occurs."
        },
        "url": {
          "description": "The URL that must be called when the webhook is triggered.",
          "format": "uri",
          "maxLength": 2000,
          "type": "string"
        },
        "use_user_field_names": {
          "description": "Indicates whether the field names must be used as payload key instead of the id.",
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "url"
      ],
      "type": "object"
    },
    "TableWebhookTestCallRequest": {
      "properties": {
        "event_type": {
          "allOf": [
            {
              "$ref": "#/definitions/EventTypesEnum"
            }
          ],
          "description": "The event type that must be used for the test call."
        },
        "headers": {
          "additionalProperties": {},
          "description": "The additional headers as an object where the key is the name and the value the value.",
          "type": "object"
        },
        "request_method": {
          "allOf": [
            {
              "$ref": "#/definitions/RequestMethodEnum"
            }
          ],
          "description": "The request method that be used when the event occurs."
        },
        "url": {
          "description": "The URL that must be called when the webhook is triggered.",
          "format": "uri",
          "maxLength": 2000,
          "type": "string"
        },
        "use_user_field_names": {
          "description": "Indicates whether the field names must be used as payload key instead of the id.",
          "type": "boolean"
        }
      },
      "required": [
        "event_type",
        "url"
      ],
      "type": "object"
    },
    "TableWebhookTestCallResponse": {
      "properties": {
        "is_unreachable": {
          "description": "Indicates whether the provided URL could be reached.",
          "readOnly": true,
          "type": "boolean"
        },
        "request": {
          "description": "A text copy of the request headers and body.",
          "readOnly": true,
          "type": "string"
        },
        "response": {
          "description": "A text copy of the response headers and body.",
          "readOnly": true,
          "type": "string"
        },
        "status_code": {
          "description": "The HTTP response status code.",
          "readOnly": true,
          "type": "integer"
        }
      },
      "required": [
        "is_unreachable",
        "request",
        "response",
        "status_code"
      ],
      "type": "object"
    },
    "Template": {
      "properties": {
        "group_id": {
          "description": "The group containing the applications related to the template. The read endpoints related to that group are publicly accessible for preview purposes.",
          "readOnly": true,
          "type": "integer",
          "x-nullable": true
        },
        "icon": {
          "description": "The font awesome class name that can be used for displaying purposes.",
          "maxLength": 32,
          "type": "string"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "is_default": {
          "description": "Indicates if the template must be selected by default. The web-frontend automatically selects the first `is_default` template that it can find.",
          "readOnly": true,
          "type": "string"
        },
        "keywords": {
          "description": "Keywords related to the template that can be used for search.",
          "type": "string"
        },
        "name": {
          "maxLength": 64,
          "type": "string"
        }
      },
      "required": [
        "group_id",
        "icon",
        "id",
        "is_default",
        "name"
      ],
      "type": "object"
    },
    "TemplateCategories": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 32,
          "type": "string"
        },
        "templates": {
          "items": {
            "$ref": "#/definitions/Template"
          },
          "readOnly": true,
          "type": "array"
        }
      },
      "required": [
        "id",
        "name",
        "templates"
      ],
      "type": "object"
    },
    "TextFieldCreateField": {
      "properties": {
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "text_default": {
          "description": "If set, this value is going to be added every time a new row created.",
          "maxLength": 255,
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "TextFieldField": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "text_default": {
          "description": "If set, this value is going to be added every time a new row created.",
          "maxLength": 255,
          "type": "string"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "TextFieldFieldSerializerWithRelatedFields": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "related_fields": {
          "description": "A list of related fields which also changed.",
          "items": {
            "$ref": "#/definitions/Field"
          },
          "readOnly": true,
          "type": "array"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "text_default": {
          "description": "If set, this value is going to be added every time a new row created.",
          "maxLength": 255,
          "type": "string"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "related_fields",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "TextFieldUpdateField": {
      "properties": {
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "text_default": {
          "description": "If set, this value is going to be added every time a new row created.",
          "maxLength": 255,
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "type": "object"
    },
    "TimezoneEnum": {
      "enum": [
        "Africa/Abidjan",
        "Africa/Accra",
        "Africa/Addis_Ababa",
        "Africa/Algiers",
        "Africa/Asmara",
        "Africa/Asmera",
        "Africa/Bamako",
        "Africa/Bangui",
        "Africa/Banjul",
        "Africa/Bissau",
        "Africa/Blantyre",
        "Africa/Brazzaville",
        "Africa/Bujumbura",
        "Africa/Cairo",
        "Africa/Casablanca",
        "Africa/Ceuta",
        "Africa/Conakry",
        "Africa/Dakar",
        "Africa/Dar_es_Salaam",
        "Africa/Djibouti",
        "Africa/Douala",
        "Africa/El_Aaiun",
        "Africa/Freetown",
        "Africa/Gaborone",
        "Africa/Harare",
        "Africa/Johannesburg",
        "Africa/Juba",
        "Africa/Kampala",
        "Africa/Khartoum",
        "Africa/Kigali",
        "Africa/Kinshasa",
        "Africa/Lagos",
        "Africa/Libreville",
        "Africa/Lome",
        "Africa/Luanda",
        "Africa/Lubumbashi",
        "Africa/Lusaka",
        "Africa/Malabo",
        "Africa/Maputo",
        "Africa/Maseru",
        "Africa/Mbabane",
        "Africa/Mogadishu",
        "Africa/Monrovia",
        "Africa/Nairobi",
        "Africa/Ndjamena",
        "Africa/Niamey",
        "Africa/Nouakchott",
        "Africa/Ouagadougou",
        "Africa/Porto-Novo",
        "Africa/Sao_Tome",
        "Africa/Timbuktu",
        "Africa/Tripoli",
        "Africa/Tunis",
        "Africa/Windhoek",
        "America/Adak",
        "America/Anchorage",
        "America/Anguilla",
        "America/Antigua",
        "America/Araguaina",
        "America/Argentina/Buenos_Aires",
        "America/Argentina/Catamarca",
        "America/Argentina/ComodRivadavia",
        "America/Argentina/Cordoba",
        "America/Argentina/Jujuy",
        "America/Argentina/La_Rioja",
        "America/Argentina/Mendoza",
        "America/Argentina/Rio_Gallegos",
        "America/Argentina/Salta",
        "America/Argentina/San_Juan",
        "America/Argentina/San_Luis",
        "America/Argentina/Tucuman",
        "America/Argentina/Ushuaia",
        "America/Aruba",
        "America/Asuncion",
        "America/Atikokan",
        "America/Atka",
        "America/Bahia",
        "America/Bahia_Banderas",
        "America/Barbados",
        "America/Belem",
        "America/Belize",
        "America/Blanc-Sablon",
        "America/Boa_Vista",
        "America/Bogota",
        "America/Boise",
        "America/Buenos_Aires",
        "America/Cambridge_Bay",
        "America/Campo_Grande",
        "America/Cancun",
        "America/Caracas",
        "America/Catamarca",
        "America/Cayenne",
        "America/Cayman",
        "America/Chicago",
        "America/Chihuahua",
        "America/Coral_Harbour",
        "America/Cordoba",
        "America/Costa_Rica",
        "America/Creston",
        "America/Cuiaba",
        "America/Curacao",
        "America/Danmarkshavn",
        "America/Dawson",
        "America/Dawson_Creek",
        "America/Denver",
        "America/Detroit",
        "America/Dominica",
        "America/Edmonton",
        "America/Eirunepe",
        "America/El_Salvador",
        "America/Ensenada",
        "America/Fort_Nelson",
        "America/Fort_Wayne",
        "America/Fortaleza",
        "America/Glace_Bay",
        "America/Godthab",
        "America/Goose_Bay",
        "America/Grand_Turk",
        "America/Grenada",
        "America/Guadeloupe",
        "America/Guatemala",
        "America/Guayaquil",
        "America/Guyana",
        "America/Halifax",
        "America/Havana",
        "America/Hermosillo",
        "America/Indiana/Indianapolis",
        "America/Indiana/Knox",
        "America/Indiana/Marengo",
        "America/Indiana/Petersburg",
        "America/Indiana/Tell_City",
        "America/Indiana/Vevay",
        "America/Indiana/Vincennes",
        "America/Indiana/Winamac",
        "America/Indianapolis",
        "America/Inuvik",
        "America/Iqaluit",
        "America/Jamaica",
        "America/Jujuy",
        "America/Juneau",
        "America/Kentucky/Louisville",
        "America/Kentucky/Monticello",
        "America/Knox_IN",
        "America/Kralendijk",
        "America/La_Paz",
        "America/Lima",
        "America/Los_Angeles",
        "America/Louisville",
        "America/Lower_Princes",
        "America/Maceio",
        "America/Managua",
        "America/Manaus",
        "America/Marigot",
        "America/Martinique",
        "America/Matamoros",
        "America/Mazatlan",
        "America/Mendoza",
        "America/Menominee",
        "America/Merida",
        "America/Metlakatla",
        "America/Mexico_City",
        "America/Miquelon",
        "America/Moncton",
        "America/Monterrey",
        "America/Montevideo",
        "America/Montreal",
        "America/Montserrat",
        "America/Nassau",
        "America/New_York",
        "America/Nipigon",
        "America/Nome",
        "America/Noronha",
        "America/North_Dakota/Beulah",
        "America/North_Dakota/Center",
        "America/North_Dakota/New_Salem",
        "America/Nuuk",
        "America/Ojinaga",
        "America/Panama",
        "America/Pangnirtung",
        "America/Paramaribo",
        "America/Phoenix",
        "America/Port-au-Prince",
        "America/Port_of_Spain",
        "America/Porto_Acre",
        "America/Porto_Velho",
        "America/Puerto_Rico",
        "America/Punta_Arenas",
        "America/Rainy_River",
        "America/Rankin_Inlet",
        "America/Recife",
        "America/Regina",
        "America/Resolute",
        "America/Rio_Branco",
        "America/Rosario",
        "America/Santa_Isabel",
        "America/Santarem",
        "America/Santiago",
        "America/Santo_Domingo",
        "America/Sao_Paulo",
        "America/Scoresbysund",
        "America/Shiprock",
        "America/Sitka",
        "America/St_Barthelemy",
        "America/St_Johns",
        "America/St_Kitts",
        "America/St_Lucia",
        "America/St_Thomas",
        "America/St_Vincent",
        "America/Swift_Current",
        "America/Tegucigalpa",
        "America/Thule",
        "America/Thunder_Bay",
        "America/Tijuana",
        "America/Toronto",
        "America/Tortola",
        "America/Vancouver",
        "America/Virgin",
        "America/Whitehorse",
        "America/Winnipeg",
        "America/Yakutat",
        "America/Yellowknife",
        "Antarctica/Casey",
        "Antarctica/Davis",
        "Antarctica/DumontDUrville",
        "Antarctica/Macquarie",
        "Antarctica/Mawson",
        "Antarctica/McMurdo",
        "Antarctica/Palmer",
        "Antarctica/Rothera",
        "Antarctica/South_Pole",
        "Antarctica/Syowa",
        "Antarctica/Troll",
        "Antarctica/Vostok",
        "Arctic/Longyearbyen",
        "Asia/Aden",
        "Asia/Almaty",
        "Asia/Amman",
        "Asia/Anadyr",
        "Asia/Aqtau",
        "Asia/Aqtobe",
        "Asia/Ashgabat",
        "Asia/Ashkhabad",
        "Asia/Atyrau",
        "Asia/Baghdad",
        "Asia/Bahrain",
        "Asia/Baku",
        "Asia/Bangkok",
        "Asia/Barnaul",
        "Asia/Beirut",
        "Asia/Bishkek",
        "Asia/Brunei",
        "Asia/Calcutta",
        "Asia/Chita",
        "Asia/Choibalsan",
        "Asia/Chongqing",
        "Asia/Chungking",
        "Asia/Colombo",
        "Asia/Dacca",
        "Asia/Damascus",
        "Asia/Dhaka",
        "Asia/Dili",
        "Asia/Dubai",
        "Asia/Dushanbe",
        "Asia/Famagusta",
        "Asia/Gaza",
        "Asia/Harbin",
        "Asia/Hebron",
        "Asia/Ho_Chi_Minh",
        "Asia/Hong_Kong",
        "Asia/Hovd",
        "Asia/Irkutsk",
        "Asia/Istanbul",
        "Asia/Jakarta",
        "Asia/Jayapura",
        "Asia/Jerusalem",
        "Asia/Kabul",
        "Asia/Kamchatka",
        "Asia/Karachi",
        "Asia/Kashgar",
        "Asia/Kathmandu",
        "Asia/Katmandu",
        "Asia/Khandyga",
        "Asia/Kolkata",
        "Asia/Krasnoyarsk",
        "Asia/Kuala_Lumpur",
        "Asia/Kuching",
        "Asia/Kuwait",
        "Asia/Macao",
        "Asia/Macau",
        "Asia/Magadan",
        "Asia/Makassar",
        "Asia/Manila",
        "Asia/Muscat",
        "Asia/Nicosia",
        "Asia/Novokuznetsk",
        "Asia/Novosibirsk",
        "Asia/Omsk",
        "Asia/Oral",
        "Asia/Phnom_Penh",
        "Asia/Pontianak",
        "Asia/Pyongyang",
        "Asia/Qatar",
        "Asia/Qostanay",
        "Asia/Qyzylorda",
        "Asia/Rangoon",
        "Asia/Riyadh",
        "Asia/Saigon",
        "Asia/Sakhalin",
        "Asia/Samarkand",
        "Asia/Seoul",
        "Asia/Shanghai",
        "Asia/Singapore",
        "Asia/Srednekolymsk",
        "Asia/Taipei",
        "Asia/Tashkent",
        "Asia/Tbilisi",
        "Asia/Tehran",
        "Asia/Tel_Aviv",
        "Asia/Thimbu",
        "Asia/Thimphu",
        "Asia/Tokyo",
        "Asia/Tomsk",
        "Asia/Ujung_Pandang",
        "Asia/Ulaanbaatar",
        "Asia/Ulan_Bator",
        "Asia/Urumqi",
        "Asia/Ust-Nera",
        "Asia/Vientiane",
        "Asia/Vladivostok",
        "Asia/Yakutsk",
        "Asia/Yangon",
        "Asia/Yekaterinburg",
        "Asia/Yerevan",
        "Atlantic/Azores",
        "Atlantic/Bermuda",
        "Atlantic/Canary",
        "Atlantic/Cape_Verde",
        "Atlantic/Faeroe",
        "Atlantic/Faroe",
        "Atlantic/Jan_Mayen",
        "Atlantic/Madeira",
        "Atlantic/Reykjavik",
        "Atlantic/South_Georgia",
        "Atlantic/St_Helena",
        "Atlantic/Stanley",
        "Australia/ACT",
        "Australia/Adelaide",
        "Australia/Brisbane",
        "Australia/Broken_Hill",
        "Australia/Canberra",
        "Australia/Currie",
        "Australia/Darwin",
        "Australia/Eucla",
        "Australia/Hobart",
        "Australia/LHI",
        "Australia/Lindeman",
        "Australia/Lord_Howe",
        "Australia/Melbourne",
        "Australia/NSW",
        "Australia/North",
        "Australia/Perth",
        "Australia/Queensland",
        "Australia/South",
        "Australia/Sydney",
        "Australia/Tasmania",
        "Australia/Victoria",
        "Australia/West",
        "Australia/Yancowinna",
        "Brazil/Acre",
        "Brazil/DeNoronha",
        "Brazil/East",
        "Brazil/West",
        "CET",
        "CST6CDT",
        "Canada/Atlantic",
        "Canada/Central",
        "Canada/Eastern",
        "Canada/Mountain",
        "Canada/Newfoundland",
        "Canada/Pacific",
        "Canada/Saskatchewan",
        "Canada/Yukon",
        "Chile/Continental",
        "Chile/EasterIsland",
        "Cuba",
        "EET",
        "EST",
        "EST5EDT",
        "Egypt",
        "Eire",
        "Etc/GMT",
        "Etc/GMT+0",
        "Etc/GMT+1",
        "Etc/GMT+10",
        "Etc/GMT+11",
        "Etc/GMT+12",
        "Etc/GMT+2",
        "Etc/GMT+3",
        "Etc/GMT+4",
        "Etc/GMT+5",
        "Etc/GMT+6",
        "Etc/GMT+7",
        "Etc/GMT+8",
        "Etc/GMT+9",
        "Etc/GMT-0",
        "Etc/GMT-1",
        "Etc/GMT-10",
        "Etc/GMT-11",
        "Etc/GMT-12",
        "Etc/GMT-13",
        "Etc/GMT-14",
        "Etc/GMT-2",
        "Etc/GMT-3",
        "Etc/GMT-4",
        "Etc/GMT-5",
        "Etc/GMT-6",
        "Etc/GMT-7",
        "Etc/GMT-8",
        "Etc/GMT-9",
        "Etc/GMT0",
        "Etc/Greenwich",
        "Etc/UCT",
        "Etc/UTC",
        "Etc/Universal",
        "Etc/Zulu",
        "Europe/Amsterdam",
        "Europe/Andorra",
        "Europe/Astrakhan",
        "Europe/Athens",
        "Europe/Belfast",
        "Europe/Belgrade",
        "Europe/Berlin",
        "Europe/Bratislava",
        "Europe/Brussels",
        "Europe/Bucharest",
        "Europe/Budapest",
        "Europe/Busingen",
        "Europe/Chisinau",
        "Europe/Copenhagen",
        "Europe/Dublin",
        "Europe/Gibraltar",
        "Europe/Guernsey",
        "Europe/Helsinki",
        "Europe/Isle_of_Man",
        "Europe/Istanbul",
        "Europe/Jersey",
        "Europe/Kaliningrad",
        "Europe/Kiev",
        "Europe/Kirov",
        "Europe/Lisbon",
        "Europe/Ljubljana",
        "Europe/London",
        "Europe/Luxembourg",
        "Europe/Madrid",
        "Europe/Malta",
        "Europe/Mariehamn",
        "Europe/Minsk",
        "Europe/Monaco",
        "Europe/Moscow",
        "Europe/Nicosia",
        "Europe/Oslo",
        "Europe/Paris",
        "Europe/Podgorica",
        "Europe/Prague",
        "Europe/Riga",
        "Europe/Rome",
        "Europe/Samara",
        "Europe/San_Marino",
        "Europe/Sarajevo",
        "Europe/Saratov",
        "Europe/Simferopol",
        "Europe/Skopje",
        "Europe/Sofia",
        "Europe/Stockholm",
        "Europe/Tallinn",
        "Europe/Tirane",
        "Europe/Tiraspol",
        "Europe/Ulyanovsk",
        "Europe/Uzhgorod",
        "Europe/Vaduz",
        "Europe/Vatican",
        "Europe/Vienna",
        "Europe/Vilnius",
        "Europe/Volgograd",
        "Europe/Warsaw",
        "Europe/Zagreb",
        "Europe/Zaporozhye",
        "Europe/Zurich",
        "GB",
        "GB-Eire",
        "GMT",
        "GMT+0",
        "GMT-0",
        "GMT0",
        "Greenwich",
        "HST",
        "Hongkong",
        "Iceland",
        "Indian/Antananarivo",
        "Indian/Chagos",
        "Indian/Christmas",
        "Indian/Cocos",
        "Indian/Comoro",
        "Indian/Kerguelen",
        "Indian/Mahe",
        "Indian/Maldives",
        "Indian/Mauritius",
        "Indian/Mayotte",
        "Indian/Reunion",
        "Iran",
        "Israel",
        "Jamaica",
        "Japan",
        "Kwajalein",
        "Libya",
        "MET",
        "MST",
        "MST7MDT",
        "Mexico/BajaNorte",
        "Mexico/BajaSur",
        "Mexico/General",
        "NZ",
        "NZ-CHAT",
        "Navajo",
        "PRC",
        "PST8PDT",
        "Pacific/Apia",
        "Pacific/Auckland",
        "Pacific/Bougainville",
        "Pacific/Chatham",
        "Pacific/Chuuk",
        "Pacific/Easter",
        "Pacific/Efate",
        "Pacific/Enderbury",
        "Pacific/Fakaofo",
        "Pacific/Fiji",
        "Pacific/Funafuti",
        "Pacific/Galapagos",
        "Pacific/Gambier",
        "Pacific/Guadalcanal",
        "Pacific/Guam",
        "Pacific/Honolulu",
        "Pacific/Johnston",
        "Pacific/Kanton",
        "Pacific/Kiritimati",
        "Pacific/Kosrae",
        "Pacific/Kwajalein",
        "Pacific/Majuro",
        "Pacific/Marquesas",
        "Pacific/Midway",
        "Pacific/Nauru",
        "Pacific/Niue",
        "Pacific/Norfolk",
        "Pacific/Noumea",
        "Pacific/Pago_Pago",
        "Pacific/Palau",
        "Pacific/Pitcairn",
        "Pacific/Pohnpei",
        "Pacific/Ponape",
        "Pacific/Port_Moresby",
        "Pacific/Rarotonga",
        "Pacific/Saipan",
        "Pacific/Samoa",
        "Pacific/Tahiti",
        "Pacific/Tarawa",
        "Pacific/Tongatapu",
        "Pacific/Truk",
        "Pacific/Wake",
        "Pacific/Wallis",
        "Pacific/Yap",
        "Poland",
        "Portugal",
        "ROC",
        "ROK",
        "Singapore",
        "Turkey",
        "UCT",
        "US/Alaska",
        "US/Aleutian",
        "US/Arizona",
        "US/Central",
        "US/East-Indiana",
        "US/Eastern",
        "US/Hawaii",
        "US/Indiana-Starke",
        "US/Michigan",
        "US/Mountain",
        "US/Pacific",
        "US/Samoa",
        "UTC",
        "Universal",
        "W-SU",
        "WET",
        "Zulu"
      ],
      "type": "string"
    },
    "Token": {
      "properties": {
        "group": {
          "description": "Only the tables of the group can be accessed.",
          "type": "integer"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "key": {
          "description": "The unique token key that can be used to authorize for the table row endpoints.",
          "maxLength": 32,
          "type": "string"
        },
        "name": {
          "description": "The human readable name of the token for the user.",
          "maxLength": 100,
          "type": "string"
        },
        "permissions": {
          "description": "Indicates per operation which permissions the API token has within the whole group. If the value of for example `create` is `true`, then the token can create rows in all tables related to the group. If a list is provided with for example `[[\"table\", 1]]` then the token only has create permissions for the table with id 1. Same goes for if a database references is provided. `[[\"database\", 1]]` means create permissions for all tables in the database with id 1.\n\nExample:\n```json\n{\n  \"create\": true// Allows creating rows in all tables.\n  // Allows reading rows from database 1 and table 10.\n  \"read\": [[\"database\", 1], [\"table\", 10]],\n  \"update\": false  // Denies updating rows in all tables.\n  \"delete\": []  // Denies deleting rows in all tables.\n }\n```",
          "properties": {
            "create": {},
            "delete": {},
            "read": {},
            "update": {}
          },
          "type": "object"
        }
      },
      "required": [
        "group",
        "id",
        "key",
        "name",
        "permissions"
      ],
      "type": "object"
    },
    "TokenCreate": {
      "properties": {
        "group": {
          "description": "Only the tables of the group can be accessed.",
          "type": "integer"
        },
        "name": {
          "description": "The human readable name of the token for the user.",
          "maxLength": 100,
          "type": "string"
        }
      },
      "required": [
        "group",
        "name"
      ],
      "type": "object"
    },
    "TrashContents": {
      "properties": {
        "application": {
          "type": "integer",
          "x-nullable": true
        },
        "group": {
          "type": "integer"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "names": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "parent_name": {
          "type": "string",
          "x-nullable": true
        },
        "parent_trash_item_id": {
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer",
          "x-nullable": true
        },
        "trash_item_id": {
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "trash_item_type": {
          "type": "string"
        },
        "trashed_at": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "user_who_trashed": {
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "group",
        "id",
        "name",
        "trash_item_id",
        "trash_item_type",
        "trashed_at",
        "user_who_trashed"
      ],
      "type": "object"
    },
    "TrashItemTypeEnum": {
      "enum": [
        "group",
        "application",
        "table",
        "field",
        "row",
        "rows",
        "view"
      ],
      "type": "string"
    },
    "TrashStructure": {
      "properties": {
        "groups": {
          "items": {
            "$ref": "#/definitions/TrashStructureGroup"
          },
          "type": "array"
        }
      },
      "required": [
        "groups"
      ],
      "type": "object"
    },
    "TrashStructureApplication": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 160,
          "type": "string"
        },
        "trashed": {
          "type": "boolean"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "type": "object"
    },
    "TrashStructureGroup": {
      "properties": {
        "applications": {
          "items": {
            "$ref": "#/definitions/TrashStructureApplication"
          },
          "type": "array"
        },
        "id": {
          "minimum": 0,
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "trashed": {
          "type": "boolean"
        }
      },
      "required": [
        "applications",
        "id",
        "name",
        "trashed"
      ],
      "type": "object"
    },
    "TypeFc4Enum": {
      "enum": [
        "left_border_color",
        "background_color"
      ],
      "type": "string"
    },
    "TypeFormulaRequest": {
      "properties": {
        "formula": {
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        }
      },
      "required": [
        "formula",
        "name"
      ],
      "type": "object"
    },
    "TypeFormulaResult": {
      "properties": {
        "array_formula_type": {
          "x-nullable": true
        },
        "date_format": {
          "description": "EU (20/02/2020), US (02/20/2020) or ISO (2020-02-20)",
          "x-nullable": true
        },
        "date_include_time": {
          "description": "Indicates if the field also includes a time.",
          "type": "boolean",
          "x-nullable": true
        },
        "date_time_format": {
          "description": "24 (14:30) or 12 (02:30 PM)",
          "x-nullable": true
        },
        "error": {
          "type": "string",
          "x-nullable": true
        },
        "formula": {
          "type": "string"
        },
        "formula_type": {
          "$ref": "#/definitions/FormulaTypeEnum"
        },
        "number_decimal_places": {
          "description": "The amount of digits allowed after the point.",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        }
      },
      "required": [
        "formula"
      ],
      "type": "object"
    },
    "URLFieldCreateField": {
      "properties": {
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "URLFieldField": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "URLFieldFieldSerializerWithRelatedFields": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "order": {
          "description": "Lowest first.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "primary": {
          "description": "Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.",
          "type": "boolean"
        },
        "related_fields": {
          "description": "A list of related fields which also changed.",
          "items": {
            "$ref": "#/definitions/Field"
          },
          "readOnly": true,
          "type": "array"
        },
        "table_id": {
          "readOnly": true,
          "type": "integer"
        },
        "type": {
          "description": "The type of the related field.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "order",
        "related_fields",
        "table_id",
        "type"
      ],
      "type": "object"
    },
    "URLFieldUpdateField": {
      "properties": {
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/FieldTypesEnum"
        }
      },
      "type": "object"
    },
    "UndoRedoResponse": {
      "properties": {
        "action_scope": {
          "description": "If an action was undone/redone/skipped due to an error this field will contain the scope of the action that was undone/redone.",
          "type": "string",
          "x-nullable": true
        },
        "action_type": {
          "description": "If an action was undone/redone/skipped due to an error this field will contain the type of the action that was undone/redone.",
          "type": "string",
          "x-nullable": true
        },
        "result_code": {
          "description": "Indicates the result of the undo/redo operation. Will be ",
          "type": "string"
        }
      },
      "required": [
        "result_code"
      ],
      "type": "object"
    },
    "UniqueRowValues": {
      "properties": {
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "values"
      ],
      "type": "object"
    },
    "UserAdminGroups": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/PermissionsEnum"
            }
          ],
          "description": "The permissions that the user has within the group."
        }
      },
      "required": [
        "id",
        "name"
      ],
      "type": "object"
    },
    "UserAdminResponse": {
      "description": "Serializes the safe user attributes to expose for a response back to the user.",
      "properties": {
        "date_joined": {
          "format": "date-time",
          "type": "string"
        },
        "groups": {
          "items": {
            "$ref": "#/definitions/UserAdminGroups"
          },
          "type": "array"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "is_active": {
          "description": "Designates whether this user should be treated as active. Set this to false instead of deleting accounts.",
          "title": "Active",
          "type": "boolean"
        },
        "is_staff": {
          "description": "Designates whether this user is an admin and has access to all groups and Baserow's admin areas. ",
          "title": "Staff status",
          "type": "boolean"
        },
        "last_login": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "maxLength": 150,
          "type": "string"
        },
        "username": {
          "format": "email",
          "type": "string"
        }
      },
      "required": [
        "groups",
        "id",
        "name",
        "username"
      ],
      "type": "object"
    },
    "UserFile": {
      "properties": {
        "image_height": {
          "maximum": 32767,
          "minimum": 0,
          "type": "integer",
          "x-nullable": true
        },
        "image_width": {
          "maximum": 32767,
          "minimum": 0,
          "type": "integer",
          "x-nullable": true
        },
        "is_image": {
          "type": "boolean"
        },
        "mime_type": {
          "maxLength": 127,
          "type": "string"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "original_name": {
          "maxLength": 255,
          "type": "string"
        },
        "size": {
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "thumbnails": {
          "additionalProperties": {},
          "readOnly": true,
          "type": "object"
        },
        "uploaded_at": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "format": "uri",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "name",
        "original_name",
        "size",
        "thumbnails",
        "uploaded_at",
        "url"
      ],
      "type": "object"
    },
    "UserFileUploadViaURLRequest": {
      "properties": {
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "url"
      ],
      "type": "object"
    },
    "UserGroupInvitation": {
      "description": "This serializer is used for displaying the invitation to the user that doesn't\nhave access to the group yet, so not for invitation management purposes.",
      "properties": {
        "created_on": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "email": {
          "description": "The email address of the user that the invitation is meant for. Only a user with that email address can accept it.",
          "format": "email",
          "maxLength": 254,
          "type": "string"
        },
        "email_exists": {
          "readOnly": true,
          "type": "boolean"
        },
        "group": {
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "invited_by": {
          "readOnly": true,
          "type": "string"
        },
        "message": {
          "description": "An optional message that the invitor can provide. This will be visible to the receiver of the invitation.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "created_on",
        "email",
        "email_exists",
        "group",
        "id",
        "invited_by",
        "message"
      ],
      "type": "object"
    },
    "ValueProviderTypeEnum": {
      "enum": [
        "single_select_color",
        "conditional_color"
      ],
      "type": "string"
    },
    "VerifyAuthToken": {
      "description": "Serializer used for verifying JWTs.",
      "properties": {
        "token": {
          "type": "string"
        }
      },
      "required": [
        "token"
      ],
      "type": "object"
    },
    "ViewCreateView": {},
    "ViewDecoration": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "order": {
          "description": "The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first.",
          "maximum": 32767,
          "minimum": -32768,
          "type": "integer"
        },
        "type": {
          "description": "The decorator type. This is then interpreted by the frontend to display the decoration.",
          "maxLength": 255,
          "type": "string"
        },
        "value_provider_conf": {
          "additionalProperties": {},
          "description": "The configuration consumed by the value provider.",
          "type": "object"
        },
        "value_provider_type": {
          "description": "The value provider type that gives the value to the decorator.",
          "maxLength": 255,
          "type": "string"
        },
        "view": {
          "description": "The view to which the decoration applies. Each view can have his own decorations.",
          "type": "integer"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "ViewFieldOptions": {},
    "ViewFilter": {
      "properties": {
        "field": {
          "description": "The field of which the value must be compared to the filter value.",
          "type": "integer"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "preload_values": {
          "additionalProperties": {},
          "description": "Can contain unique preloaded values per filter. This is for example used by the `link_row_has` filter to communicate the display name if a value is provided.",
          "readOnly": true,
          "type": "object"
        },
        "type": {
          "description": "Indicates how the field's value must be compared to the filter's value. The filter is always in this order `field` `type` `value` (example: `field_1` `contains` `Test`).",
          "maxLength": 48,
          "type": "string"
        },
        "value": {
          "description": "The filter value that must be compared to the field's value.",
          "maxLength": 255,
          "type": "string"
        },
        "view": {
          "description": "The view to which the filter applies. Each view can have his own filters.",
          "type": "integer"
        }
      },
      "required": [
        "field",
        "id",
        "preload_values",
        "type",
        "view"
      ],
      "type": "object"
    },
    "ViewFilterTypesEnum": {
      "enum": [
        "equal",
        "not_equal",
        "filename_contains",
        "has_file_type",
        "contains",
        "contains_not",
        "length_is_lower_than",
        "higher_than",
        "lower_than",
        "date_equal",
        "date_before",
        "date_after",
        "date_not_equal",
        "date_equals_today",
        "date_equals_days_ago",
        "date_equals_month",
        "date_equals_day_of_month",
        "date_equals_year",
        "single_select_equal",
        "single_select_not_equal",
        "link_row_has",
        "link_row_has_not",
        "boolean",
        "empty",
        "not_empty",
        "multiple_select_has",
        "multiple_select_has_not"
      ],
      "type": "string"
    },
    "ViewSort": {
      "properties": {
        "field": {
          "description": "The field that must be sorted on.",
          "type": "integer"
        },
        "id": {
          "readOnly": true,
          "type": "integer"
        },
        "order": {
          "allOf": [
            {
              "$ref": "#/definitions/OrderEnum"
            }
          ],
          "description": "Indicates the sort order direction. ASC (Ascending) is from A to Z and DESC (Descending) is from Z to A."
        },
        "view": {
          "description": "The view to which the sort applies. Each view can have his own sortings.",
          "type": "integer"
        }
      },
      "required": [
        "field",
        "id",
        "view"
      ],
      "type": "object"
    },
    "ViewTypesEnum": {
      "enum": [
        "grid",
        "gallery",
        "form",
        "kanban"
      ],
      "type": "string"
    },
    "ViewView": {},
    "form_view_field_options": {
      "properties": {
        "field_options": {
          "additionalProperties": {
            "$ref": "#/definitions/FormViewFieldOptions"
          },
          "description": "An object containing the field id as key and the properties related to view as value.",
          "type": "object"
        }
      },
      "required": [
        "field_options"
      ],
      "type": "object"
    },
    "form_view_update": {
      "properties": {
        "cover_image": {
          "allOf": [
            {
              "$ref": "#/definitions/UserFile"
            }
          ],
          "description": "The cover image that must be displayed at the top of the form.",
          "x-nullable": true
        },
        "description": {
          "description": "The description that is displayed at the beginning of the form.",
          "type": "string"
        },
        "filter_type": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterTypeEnum"
            }
          ],
          "description": "Indicates whether all the rows should apply to all filters (AND) or to any filter (OR)."
        },
        "filters_disabled": {
          "description": "Allows users to see results unfiltered while still keeping the filters saved for the view.",
          "type": "boolean"
        },
        "logo_image": {
          "allOf": [
            {
              "$ref": "#/definitions/UserFile"
            }
          ],
          "description": "The logo image that must be displayed at the top of the form.",
          "x-nullable": true
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "public": {
          "description": "Indicates whether the view is publicly accessible to visitors.",
          "type": "boolean"
        },
        "public_view_password": {
          "description": "The password required to access the public view URL.",
          "maxLength": 128,
          "type": "string"
        },
        "slug": {
          "description": "The unique slug that can be used to construct a public URL.",
          "readOnly": true,
          "type": "string"
        },
        "submit_action": {
          "allOf": [
            {
              "$ref": "#/definitions/SubmitActionEnum"
            }
          ],
          "description": "The action that must be performed after the visitor has filled out the form."
        },
        "submit_action_message": {
          "description": "If the `submit_action` is MESSAGE, then this message will be shown to the visitor after submitting the form.",
          "type": "string"
        },
        "submit_action_redirect_url": {
          "description": "If the `submit_action` is REDIRECT,then the visitors will be redirected to the this URL after submitting the form.",
          "format": "uri",
          "maxLength": 200,
          "type": "string"
        },
        "submit_text": {
          "description": "The text displayed on the submit button.",
          "type": "string"
        },
        "title": {
          "description": "The title that is displayed at the beginning of the form.",
          "type": "string"
        }
      },
      "required": [
        "slug"
      ],
      "type": "object"
    },
    "gallery_view_field_options": {
      "properties": {
        "field_options": {
          "additionalProperties": {
            "$ref": "#/definitions/GalleryViewFieldOptions"
          },
          "description": "An object containing the field id as key and the properties related to view as value.",
          "type": "object"
        }
      },
      "required": [
        "field_options"
      ],
      "type": "object"
    },
    "gallery_view_update": {
      "properties": {
        "card_cover_image_field": {
          "description": "References a file field of which the first image must be shown as card cover image.",
          "type": "integer",
          "x-nullable": true
        },
        "filter_type": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterTypeEnum"
            }
          ],
          "description": "Indicates whether all the rows should apply to all filters (AND) or to any filter (OR)."
        },
        "filters_disabled": {
          "description": "Allows users to see results unfiltered while still keeping the filters saved for the view.",
          "type": "boolean"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "public_view_password": {
          "description": "The password required to access the public view URL.",
          "maxLength": 128,
          "type": "string"
        }
      },
      "type": "object"
    },
    "grid_view_field_options": {
      "properties": {
        "field_options": {
          "additionalProperties": {
            "$ref": "#/definitions/GridViewFieldOptions"
          },
          "description": "An object containing the field id as key and the properties related to view as value.",
          "type": "object"
        }
      },
      "required": [
        "field_options"
      ],
      "type": "object"
    },
    "grid_view_update": {
      "properties": {
        "filter_type": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterTypeEnum"
            }
          ],
          "description": "Indicates whether all the rows should apply to all filters (AND) or to any filter (OR)."
        },
        "filters_disabled": {
          "description": "Allows users to see results unfiltered while still keeping the filters saved for the view.",
          "type": "boolean"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "public": {
          "description": "Indicates whether the view is publicly accessible to visitors.",
          "type": "boolean"
        },
        "public_view_password": {
          "description": "The password required to access the public view URL.",
          "maxLength": 128,
          "type": "string"
        },
        "row_identifier_type": {
          "$ref": "#/definitions/RowIdentifierTypeEnum"
        },
        "slug": {
          "description": "The unique slug that can be used to construct a public URL.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "slug"
      ],
      "type": "object"
    },
    "kanban_view_field_options": {
      "properties": {
        "field_options": {
          "additionalProperties": {
            "$ref": "#/definitions/KanbanViewFieldOptions"
          },
          "description": "An object containing the field id as key and the properties related to view as value.",
          "type": "object"
        }
      },
      "required": [
        "field_options"
      ],
      "type": "object"
    },
    "kanban_view_update": {
      "properties": {
        "card_cover_image_field": {
          "description": "References a file field of which the first image must be shown as card cover image.",
          "type": "integer",
          "x-nullable": true
        },
        "filter_type": {
          "allOf": [
            {
              "$ref": "#/definitions/FilterTypeEnum"
            }
          ],
          "description": "Indicates whether all the rows should apply to all filters (AND) or to any filter (OR)."
        },
        "filters_disabled": {
          "description": "Allows users to see results unfiltered while still keeping the filters saved for the view.",
          "type": "boolean"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "public_view_password": {
          "description": "The password required to access the public view URL.",
          "maxLength": 128,
          "type": "string"
        },
        "single_select_field": {
          "type": "integer",
          "x-nullable": true
        }
      },
      "type": "object"
    }
  },
  "securityDefinitions": {
    "JWT": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    },
    "Token": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "tags": [
    {
      "name": "Settings"
    },
    {
      "name": "User"
    },
    {
      "name": "User files"
    },
    {
      "name": "Groups"
    },
    {
      "name": "Group invitations"
    },
    {
      "name": "Templates"
    },
    {
      "name": "Trash"
    },
    {
      "name": "Applications"
    },
    {
      "name": "Database tables"
    },
    {
      "name": "Database table fields"
    },
    {
      "name": "Database table views"
    },
    {
      "name": "Database table view filters"
    },
    {
      "name": "Database table view sortings"
    },
    {
      "name": "Database table view decorations"
    },
    {
      "name": "Database table grid view"
    },
    {
      "name": "Database table gallery view"
    },
    {
      "name": "Database table form view"
    },
    {
      "name": "Database table kanban view"
    },
    {
      "name": "Database table rows"
    },
    {
      "name": "Database table export"
    },
    {
      "name": "Database table webhooks"
    },
    {
      "name": "Database tokens"
    },
    {
      "name": "Database airtable import"
    },
    {
      "name": "Admin"
    }
  ],
  "x-components": {}
}
